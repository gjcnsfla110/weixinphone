{
  "version": 3,
  "sources": ["../../../../../node_modules/uview-pro/libs/function/queryParams.ts", "../../../../../node_modules/uview-pro/libs/function/route.ts", "../../../../../node_modules/uview-pro/libs/function/timeFormat.ts", "../../../../../node_modules/uview-pro/libs/function/timeFrom.ts", "../../../../../node_modules/uview-pro/libs/function/colorGradient.ts", "../../../../../node_modules/uview-pro/libs/function/guid.ts", "../../../../../node_modules/uview-pro/libs/function/color.ts", "../../../../../node_modules/uview-pro/libs/function/type2icon.ts", "../../../../../node_modules/uview-pro/libs/function/randomArray.ts", "../../../../../node_modules/uview-pro/libs/function/deepClone.ts", "../../../../../node_modules/uview-pro/libs/function/deepMerge.ts", "../../../../../node_modules/uview-pro/libs/function/test.ts", "../../../../../node_modules/uview-pro/libs/function/addUnit.ts", "../../../../../node_modules/uview-pro/libs/function/random.ts", "../../../../../node_modules/uview-pro/libs/function/trim.ts", "../../../../../node_modules/uview-pro/libs/function/toast.ts", "../../../../../node_modules/uview-pro/libs/function/getParent.ts", "../../../../../node_modules/uview-pro/libs/function/$parent.ts", "../../../../../node_modules/uview-pro/libs/function/sys.ts", "../../../../../node_modules/uview-pro/libs/function/debounce.ts", "../../../../../node_modules/uview-pro/libs/function/throttle.ts", "../../../../../node_modules/uview-pro/libs/function/getRect.ts", "../../../../../node_modules/uview-pro/libs/function/parent.ts", "../../../../../node_modules/uview-pro/package.json", "../../../../../node_modules/uview-pro/libs/config/config.ts", "../../../../../node_modules/uview-pro/libs/config/zIndex.ts", "../../../../../node_modules/uview-pro/libs/util/emitter.ts", "../../../../../node_modules/uview-pro/libs/util/mitt.ts", "../../../../../node_modules/uview-pro/libs/request/index.ts", "../../../../../node_modules/uview-pro/libs/hooks/useComponent.ts", "../../../../../node_modules/uview-pro/libs/util/logger.ts", "../../../../../node_modules/uview-pro/libs/hooks/useEmitter.ts", "../../../../../node_modules/uview-pro/libs/hooks/useRect.ts", "../../../../../node_modules/uview-pro/libs/index.ts", "../../../../../node_modules/uview-pro/index.ts"],
  "sourcesContent": ["/**\n * 对象转url参数\n * @param data 对象参数\n * @param isPrefix 是否自动加上\"?\"，默认true\n * @param arrayFormat 数组参数格式，indices/brackets/repeat/comma，默认brackets\n * @returns url参数字符串\n */\nfunction queryParams(\n    data: Record<string, any> = {},\n    isPrefix: boolean = true,\n    arrayFormat: 'indices' | 'brackets' | 'repeat' | 'comma' = 'brackets'\n): string {\n    const prefix = isPrefix ? '?' : '';\n    const _result: string[] = [];\n    if (!['indices', 'brackets', 'repeat', 'comma'].includes(arrayFormat)) arrayFormat = 'brackets';\n    for (const key in data) {\n        const value = data[key];\n        // 去掉为空的参数\n        if (['', undefined, null].includes(value)) {\n            continue;\n        }\n        // 如果值为数组，另行处理\n        if (Array.isArray(value)) {\n            // e.g. {ids: [1, 2, 3]}\n            switch (arrayFormat) {\n                case 'indices':\n                    // 结果: ids[0]=1&ids[1]=2&ids[2]=3\n                    for (let i = 0; i < value.length; i++) {\n                        _result.push(`${key}[${i}]=${value[i]}`);\n                    }\n                    break;\n                case 'brackets':\n                    // 结果: ids[]=1&ids[]=2&ids[]=3\n                    value.forEach((_value: any) => {\n                        _result.push(`${key}[]=${_value}`);\n                    });\n                    break;\n                case 'repeat':\n                    // 结果: ids=1&ids=2&ids=3\n                    value.forEach((_value: any) => {\n                        _result.push(`${key}=${_value}`);\n                    });\n                    break;\n                case 'comma':\n                    // 结果: ids=1,2,3\n                    let commaStr = '';\n                    value.forEach((_value: any) => {\n                        commaStr += (commaStr ? ',' : '') + _value;\n                    });\n                    _result.push(`${key}=${commaStr}`);\n                    break;\n                default:\n                    value.forEach((_value: any) => {\n                        _result.push(`${key}[]=${_value}`);\n                    });\n            }\n        } else {\n            _result.push(`${key}=${value}`);\n        }\n    }\n    return _result.length ? prefix + _result.join('&') : '';\n}\n\nexport default queryParams;\n", "/**\n * 路由跳转方法，该方法相对于直接使用uni.xxx的好处是使用更加简单快捷\n * 并且带有路由拦截功能\n */\n\ninterface RouterConfig {\n    type?: string;\n    url?: string;\n    delta?: number;\n    params?: Record<string, any>;\n    animationType?: string;\n    animationDuration?: number;\n    intercept?: boolean;\n}\n\ndeclare const uni: any; // 声明uni对象，避免ts报错\n\nclass Router {\n    config: RouterConfig;\n    // route: (options?: string | RouterConfig, params?: Record<string, any>) => Promise<void>;\n\n    constructor() {\n        // 原始属性定义\n        this.config = {\n            type: 'navigateTo',\n            url: '',\n            delta: 1, // navigateBack页面后退时,回退的层数\n            params: {}, // 传递的参数\n            animationType: 'pop-in', // 窗口动画,只在APP有效\n            animationDuration: 300, // 窗口动画持续时间,单位毫秒,只在APP有效\n            intercept: false // 是否需要拦截\n        };\n        // 因为route方法是需要对外赋值给另外的对象使用，同时route内部有使用this，会导致route失去上下文\n        // 这里在构造函数中进行this绑定\n        this.route = this.route.bind(this);\n    }\n\n    // 判断url前面是否有\"/\"，如果没有则加上，否则无法跳转\n    addRootPath(url: string): string {\n        return url[0] === '/' ? url : `/${url}`;\n    }\n\n    // 整合路由参数\n    mixinParam(url: string, params: Record<string, any>): string {\n        url = url && this.addRootPath(url);\n        // 使用正则匹配，主要依据是判断是否有\"/\",\"?\",\"=\"等，如“/page/index/index?name=mary\"\n        // 如果有url中有get参数，转换后无需带上\"?\"\n        let query = '';\n        if (/.*\\/.*\\?.*=.*/.test(url)) {\n            // object对象转为get类型的参数\n            query = uni.$u.queryParams(params, false);\n            // 因为已有get参数,所以后面拼接的参数需要带上\"&\"隔开\n            return url + '&' + query;\n        } else {\n            // 直接拼接参数，因为此处url中没有后面的query参数，也就没有\"?/&\"之类的符号\n            query = uni.$u.queryParams(params);\n            return url + query;\n        }\n    }\n\n    /**\n     * 路由跳转主方法\n     * @param options 跳转配置或url字符串\n     * @param params 跳转参数\n     */\n    async route(options: string | RouterConfig = {}, params: Record<string, any> = {}): Promise<void> {\n        let mergeConfig: RouterConfig = {};\n        if (typeof options === 'string') {\n            // 如果options为字符串，则为route(url, params)的形式\n            mergeConfig.url = this.mixinParam(options, params);\n            mergeConfig.type = 'navigateTo';\n        } else {\n            mergeConfig = uni.$u.deepMerge(this.config, options);\n            // 否则正常使用mergeConfig中的url和params进行拼接\n            mergeConfig.url = this.mixinParam(options.url || '', options.params || {});\n        }\n        if (params.intercept) {\n            this.config.intercept = params.intercept;\n        }\n        // params参数也带给拦截器\n        mergeConfig.params = params;\n        // 合并内外部参数\n        mergeConfig = uni.$u.deepMerge(this.config, mergeConfig);\n        // 判断用户是否定义了拦截器\n        if (uni.$u.routeIntercept && typeof uni.$u.routeIntercept === 'function') {\n            // 定一个promise，根据用户执行resolve(true)或者resolve(false)来决定是否进行路由跳转\n            const isNext = await new Promise<boolean>(resolve => {\n                uni.$u.routeIntercept(mergeConfig, resolve);\n            });\n            // 如果isNext为true，则执行路由跳转\n            isNext && this.openPage(mergeConfig);\n        } else {\n            this.openPage(mergeConfig);\n        }\n    }\n\n    // 执行路由跳转\n    openPage(config: RouterConfig): void {\n        const { url = '', type = '', delta = 1, animationDuration = 300 } = config;\n        if (type == 'navigateTo' || type == 'to') {\n            uni.navigateTo({ url, animationDuration });\n        }\n        if (type == 'redirectTo' || type == 'redirect') {\n            uni.redirectTo({ url });\n        }\n        if (type == 'switchTab' || type == 'tab') {\n            uni.switchTab({ url });\n        }\n        if (type == 'reLaunch' || type == 'launch') {\n            uni.reLaunch({ url });\n        }\n        if (type == 'navigateBack' || type == 'back') {\n            uni.navigateBack({ delta });\n        }\n    }\n}\n\nexport default new Router().route;\n", "// padStart 的 polyfill，因为某些机型或情况，还无法支持es7的padStart，比如电脑版的微信小程序\n// 所以这里做一个兼容polyfill的兼容处理\nif (!String.prototype.padStart) {\n    // 为了方便表示这里 fillString 用了ES6 的默认参数，不影响理解\n    String.prototype.padStart = function (this: string, maxLength: number, fillString: string = ' '): string {\n        if (Object.prototype.toString.call(fillString) !== '[object String]')\n            throw new TypeError('fillString must be String');\n        let str = this;\n        if (str.length >= maxLength) return String(str);\n        let fillLength = maxLength - str.length,\n            times = Math.ceil(fillLength / fillString.length);\n        while ((times >>= 1)) {\n            fillString += fillString;\n            if (times === 1) {\n                fillString += fillString;\n            }\n        }\n        return fillString.slice(0, fillLength) + str;\n    };\n}\n\n/**\n * 时间格式化\n * @param dateTime 时间戳、Date对象或null，默认当前时间\n * @param fmt 格式化字符串，默认 'yyyy-mm-dd'\n * @returns 格式化后的时间字符串\n */\nfunction timeFormat(dateTime: number | string | Date | null = null, fmt: string = 'yyyy-mm-dd'): string {\n    // 如果为null,则格式化当前时间\n    if (!dateTime) dateTime = Number(new Date());\n    // 如果dateTime长度为10或者13，则为秒和毫秒的时间戳，如果超过13位，则为其他的时间格式\n    if (typeof dateTime === 'number' || typeof dateTime === 'string') {\n        if (dateTime.toString().length == 10) dateTime = Number(dateTime) * 1000;\n    }\n    const date = new Date(dateTime);\n    let ret: RegExpExecArray | null;\n    const opt: Record<string, string> = {\n        'y+': date.getFullYear().toString(), // 年\n        'm+': (date.getMonth() + 1).toString(), // 月\n        'd+': date.getDate().toString(), // 日\n        'h+': date.getHours().toString(), // 时\n        'M+': date.getMinutes().toString(), // 分\n        's+': date.getSeconds().toString() // 秒\n        // 有其他格式化字符需求可以继续添加，必须转化成字符串\n    };\n    for (const k in opt) {\n        ret = new RegExp('(' + k + ')').exec(fmt);\n        if (ret) {\n            fmt = fmt.replace(ret[1], ret[1].length == 1 ? opt[k] : opt[k].padStart(ret[1].length, '0'));\n        }\n    }\n    return fmt;\n}\n\nexport default timeFormat;\n", "import timeFormat from './timeFormat';\n\n/**\n * 时间戳转为多久之前\n * @param dateTime 时间戳、Date对象或null，默认当前时间\n * @param format 时间格式字符串或false，超出范围时返回指定格式，否则返回多久以前\n * @returns 格式化后的时间字符串\n */\nfunction timeFrom(dateTime: number | string | Date | null = null, format: string | false = 'yyyy-mm-dd'): string {\n    // 如果为null,则格式化当前时间\n    if (!dateTime) dateTime = Number(new Date());\n    // 如果dateTime长度为10或者13，则为秒和毫秒的时间戳，如果超过13位，则为其他的时间格式\n    if (typeof dateTime === 'number' || typeof dateTime === 'string') {\n        if (dateTime.toString().length == 10) dateTime = Number(dateTime) * 1000;\n    }\n    const timestamp = +new Date(Number(dateTime));\n    const timer = (Number(new Date()) - timestamp) / 1000;\n    // 如果小于5分钟,则返回\"刚刚\",其他以此类推\n    let tips = '';\n    switch (true) {\n        case timer < 300:\n            tips = '刚刚';\n            break;\n        case timer >= 300 && timer < 3600:\n            tips = parseInt(String(timer / 60)) + '分钟前';\n            break;\n        case timer >= 3600 && timer < 86400:\n            tips = parseInt(String(timer / 3600)) + '小时前';\n            break;\n        case timer >= 86400 && timer < 2592000:\n            tips = parseInt(String(timer / 86400)) + '天前';\n            break;\n        default:\n            // 如果format为false，则无论什么时间戳，都显示xx之前\n            if (format === false) {\n                if (timer >= 2592000 && timer < 365 * 86400) {\n                    tips = parseInt(String(timer / (86400 * 30))) + '个月前';\n                } else {\n                    tips = parseInt(String(timer / (86400 * 365))) + '年前';\n                }\n            } else {\n                tips = timeFormat(timestamp, format as string);\n            }\n    }\n    return tips;\n}\n\nexport default timeFrom;\n", "/**\n * 求两个颜色之间的渐变值\n * @param startColor 开始的颜色\n * @param endColor 结束的颜色\n * @param step 颜色等分的份额\n * @returns 渐变色数组\n */\nfunction colorGradient(\n    startColor: string = 'rgb(0, 0, 0)',\n    endColor: string = 'rgb(255, 255, 255)',\n    step: number = 10\n): string[] {\n    const startRGB = hexToRgb(startColor, false) as [number, number, number]; // 转换为rgb数组模式\n    const [startR, startG, startB] = startRGB;\n    const endRGB = hexToRgb(endColor, false) as [number, number, number];\n    const [endR, endG, endB] = endRGB;\n\n    const sR = (endR - startR) / step; // 总差值\n    const sG = (endG - startG) / step;\n    const sB = (endB - startB) / step;\n    const colorArr: string[] = [];\n    for (let i = 0; i < step; i++) {\n        // 计算每一步的hex值\n        const hex = rgbToHex(\n            `rgb(${Math.round(sR * i + startR)},${Math.round(sG * i + startG)},${Math.round(sB * i + startB)})`\n        );\n        colorArr.push(hex as string);\n    }\n    return colorArr;\n}\n\n/**\n * 将hex表示方式转换为rgb表示方式(返回rgb数组或字符串)\n * @param sColor hex或rgb字符串\n * @param str 是否返回字符串\n * @returns rgb数组或字符串\n */\nfunction hexToRgb(sColor: string, str: boolean = true): [number, number, number] | string {\n    const reg = /^#([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$/;\n    sColor = sColor.toLowerCase();\n    if (sColor && reg.test(sColor)) {\n        if (sColor.length === 4) {\n            let sColorNew = '#';\n            for (let i = 1; i < 4; i += 1) {\n                sColorNew += sColor.slice(i, i + 1).concat(sColor.slice(i, i + 1));\n            }\n            sColor = sColorNew;\n        }\n        // 处理六位的颜色值\n        const sColorChange: [number, number, number] = [\n            parseInt('0x' + sColor.slice(1, 3)),\n            parseInt('0x' + sColor.slice(3, 5)),\n            parseInt('0x' + sColor.slice(5, 7))\n        ];\n        if (!str) {\n            return sColorChange;\n        } else {\n            return `rgb(${sColorChange[0]},${sColorChange[1]},${sColorChange[2]})`;\n        }\n    } else if (/^(rgb|RGB)/.test(sColor)) {\n        const arr = sColor.replace(/(?:\\(|\\)|rgb|RGB)*/g, '').split(',');\n        return arr.map(val => Number(val)) as [number, number, number];\n    } else {\n        return sColor;\n    }\n}\n\n/**\n * rgb转hex\n * @param rgb rgb字符串或hex字符串\n * @returns hex字符串\n */\nfunction rgbToHex(rgb: string): string | undefined {\n    const reg = /^#([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$/;\n    if (/^(rgb|RGB)/.test(rgb)) {\n        const aColor = rgb.replace(/(?:\\(|\\)|rgb|RGB)*/g, '').split(',');\n        let strHex = '#';\n        for (let i = 0; i < aColor.length; i++) {\n            let hex = Number(aColor[i]).toString(16);\n            hex = hex.length == 1 ? '0' + hex : hex; // 保证每个rgb的值为2位\n            strHex += hex;\n        }\n        if (strHex.length !== 7) {\n            strHex = rgb;\n        }\n        return strHex;\n    } else if (reg.test(rgb)) {\n        const aNum = rgb.replace(/#/, '').split('');\n        if (aNum.length === 6) {\n            return rgb;\n        } else if (aNum.length === 3) {\n            let numHex = '#';\n            for (let i = 0; i < aNum.length; i += 1) {\n                numHex += aNum[i] + aNum[i];\n            }\n            return numHex;\n        }\n    } else {\n        return rgb;\n    }\n    // 默认返回原始值\n    return rgb;\n}\n\n/**\n * JS颜色十六进制转换为rgb或rgba,返回的格式为 rgba（255，255，255，0.5）字符串\n * @param color 十六进制色值或rgb字符串\n * @param alpha 透明度\n * @returns rgba字符串\n */\nfunction colorToRgba(color: string, alpha: number = 0.3): string {\n    color = rgbToHex(color) as string; // 确保是hex格式\n    const reg = /^#([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$/;\n    let sColor = color.toLowerCase();\n    if (sColor && reg.test(sColor)) {\n        if (sColor.length === 4) {\n            let sColorNew = '#';\n            for (let i = 1; i < 4; i += 1) {\n                sColorNew += sColor.slice(i, i + 1).concat(sColor.slice(i, i + 1));\n            }\n            sColor = sColorNew;\n        }\n        const sColorChange: [number, number, number] = [\n            parseInt('0x' + sColor.slice(1, 3)),\n            parseInt('0x' + sColor.slice(3, 5)),\n            parseInt('0x' + sColor.slice(5, 7))\n        ];\n        return `rgba(${sColorChange.join(',')},${alpha})`;\n    } else {\n        return sColor;\n    }\n}\n\nexport default {\n    colorGradient,\n    hexToRgb,\n    rgbToHex,\n    colorToRgba\n};\n", "/**\n * 本算法来源于简书开源代码，详见：https://www.jianshu.com/p/fdbf293d0a85\n * 全局唯一标识符（uuid，Globally Unique Identifier）,也称作 uuid(Universally Unique IDentifier)\n * 一般用于多个组件之间,给它一个唯一的标识符,或者v-for循环的时候,如果使用数组的index可能会导致更新列表出现问题\n * 最可能的情况是左滑删除item或者对某条信息流\"不喜欢\"并去掉它的时候,会导致组件内的数据可能出现错乱\n * v-for的时候,推荐使用后端返回的id而不是循环的index\n * @param len uuid的长度，默认32\n * @param firstU 将返回的首字母置为\"u\"，默认true\n * @param radix 生成uuid的基数(意味着返回的字符串都是这个基数),2-二进制,8-八进制,10-十进制,16-十六进制\n * @returns 生成的uuid字符串\n */\nfunction guid(len: number = 32, firstU: boolean = true, radix?: number): string {\n    const chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');\n    const uuid: string[] = [];\n    const base = radix || chars.length;\n\n    if (len) {\n        // 如果指定uuid长度,只是取随机的字符,0|x为位运算,能去掉x的小数位,返回整数位\n        for (let i = 0; i < len; i++) uuid[i] = chars[0 | (Math.random() * base)];\n    } else {\n        let r: number;\n        // rfc4122标准要求返回的uuid中,某些位为固定的字符\n        uuid[8] = uuid[13] = uuid[18] = uuid[23] = '-';\n        uuid[14] = '4';\n\n        for (let i = 0; i < 36; i++) {\n            if (!uuid[i]) {\n                r = 0 | (Math.random() * 16);\n                uuid[i] = chars[i == 19 ? (r & 0x3) | 0x8 : r];\n            }\n        }\n    }\n    // 移除第一个字符,并用u替代,因为第一个字符为数值时,该guid不能用作id或者class\n    if (firstU) {\n        uuid.shift();\n        return 'u' + uuid.join('');\n    } else {\n        return uuid.join('');\n    }\n}\n\nexport default guid;\n", "import type { ThemeColor } from '../../types/global';\n\nconst color: ThemeColor = {\n    primary: '#2979ff',\n    primaryDark: '#2b85e4',\n    primaryDisabled: '#a0cfff',\n    primaryLight: '#ecf5ff',\n    bgColor: '#f3f4f6',\n\n    info: '#909399',\n    infoDark: '#82848a',\n    infoDisabled: '#c8c9cc',\n    infoLight: '#f4f4f5',\n\n    warning: '#ff9900',\n    warningDark: '#f29100',\n    warningDisabled: '#fcbd71',\n    warningLight: '#fdf6ec',\n\n    error: '#fa3534',\n    errorDark: '#dd6161',\n    errorDisabled: '#fab6b6',\n    errorLight: '#fef0f0',\n\n    success: '#19be6b',\n    successDark: '#18b566',\n    successDisabled: '#71d5a1',\n    successLight: '#dbf1e1',\n\n    mainColor: '#303133',\n    contentColor: '#606266',\n    tipsColor: '#909399',\n    lightColor: '#c0c4cc',\n    borderColor: '#e4e7ed'\n};\n\nexport default color;\n", "/**\n * 根据主题type值,获取对应的图标\n * @param type 主题名称, primary|info|error|warning|success，默认success\n * @param fill 是否使用fill填充实体的图标，默认false\n * @returns 图标名称字符串\n */\nfunction type2icon(\n    type: 'primary' | 'info' | 'error' | 'warning' | 'success' = 'success',\n    fill: boolean = false\n): string {\n    // 如果非预置值,默认为success\n    if (!['primary', 'info', 'error', 'warning', 'success'].includes(type)) type = 'success';\n    let iconName = '';\n    // 目前(2019-12-12),info和primary使用同一个图标\n    switch (type) {\n        case 'primary':\n            iconName = 'info-circle';\n            break;\n        case 'info':\n            iconName = 'info-circle';\n            break;\n        case 'error':\n            iconName = 'close-circle';\n            break;\n        case 'warning':\n            iconName = 'error-circle';\n            break;\n        case 'success':\n            iconName = 'checkmark-circle';\n            break;\n        default:\n            iconName = 'checkmark-circle';\n    }\n    // 是否是实体类型,加上-fill,在icon组件库中,实体的类名是后面加-fill的\n    if (fill) iconName += '-fill';\n    return iconName;\n}\n\nexport default type2icon;\n", "/**\n * 打乱数组顺序\n * @param array 需要打乱的数组\n * @returns 打乱后的新数组\n */\nfunction randomArray<T>(array: T[] = []): T[] {\n    // 原理是sort排序,Math.random()产生0<= x < 1之间的数,会导致x-0.5大于或者小于0\n    return array.sort(() => Math.random() - 0.5);\n}\n\nexport default randomArray;\n", "// 判断arr是否为一个数组，返回一个bool值\nfunction isArray(arr: any): arr is any[] {\n    return Object.prototype.toString.call(arr) === '[object Array]';\n}\n\n/**\n * 深度克隆\n * @param obj 需要克隆的对象\n * @param cache 用于处理循环引用的 WeakMap\n * @returns 克隆后的对象\n */\nfunction deepClone<T>(obj: T, cache: WeakMap<any, any> = new WeakMap()): T {\n    if (obj === null || typeof obj !== 'object') return obj;\n    if (cache.has(obj)) return cache.get(obj);\n    let clone: any;\n    if (obj instanceof Date) {\n        clone = new Date(obj.getTime());\n    } else if (obj instanceof RegExp) {\n        clone = new RegExp(obj);\n    } else if (obj instanceof Map) {\n        clone = new Map(Array.from(obj, ([key, value]) => [key, deepClone(value, cache)]));\n    } else if (obj instanceof Set) {\n        clone = new Set(Array.from(obj, value => deepClone(value, cache)));\n    } else if (Array.isArray(obj)) {\n        clone = obj.map(value => deepClone(value, cache));\n    } else if (Object.prototype.toString.call(obj) === '[object Object]') {\n        clone = Object.create(Object.getPrototypeOf(obj));\n        cache.set(obj, clone);\n        for (const [key, value] of Object.entries(obj)) {\n            clone[key] = deepClone(value, cache);\n        }\n    } else {\n        clone = Object.assign({}, obj);\n    }\n    cache.set(obj, clone);\n    return clone;\n}\n\nexport default deepClone;\n", "import deepClone from './deepClone';\n\n/**\n * JS对象深度合并\n * @param target 目标对象\n * @param source 源对象\n * @returns 合并后的对象\n */\nfunction deepMerge<T extends object, S extends object>(target: T = {} as T, source: S = {} as S): T & S {\n    target = deepClone(target);\n    if (typeof target !== 'object' || target === null || typeof source !== 'object' || source === null)\n        return target as T & S;\n    const merged: any = Array.isArray(target) ? target.slice() : Object.assign({}, target);\n    for (const prop in source) {\n        if (!Object.prototype.hasOwnProperty.call(source, prop)) continue;\n        const sourceValue = (source as any)[prop];\n        const targetValue = merged[prop];\n        if (sourceValue instanceof Date) {\n            merged[prop] = new Date(sourceValue);\n        } else if (sourceValue instanceof RegExp) {\n            merged[prop] = new RegExp(sourceValue);\n        } else if (sourceValue instanceof Map) {\n            merged[prop] = new Map(sourceValue);\n        } else if (sourceValue instanceof Set) {\n            merged[prop] = new Set(sourceValue);\n        } else if (typeof sourceValue === 'object' && sourceValue !== null) {\n            merged[prop] = deepMerge(targetValue, sourceValue);\n        } else {\n            merged[prop] = sourceValue;\n        }\n    }\n    return merged as T & S;\n}\n\nexport default deepMerge;\n", "/**\n * 验证电子邮箱格式\n */\nfunction email(value: string): boolean {\n    return /[\\w!#$%&'*+/=?^_`{|}~-]+(?:\\.[\\w!#$%&'*+/=?^_`{|}~-]+)*@(?:[\\w](?:[\\w-]*[\\w])?\\.)+[\\w](?:[\\w-]*[\\w])?/.test(\n        value\n    );\n}\n\n/**\n * 验证手机格式\n */\nfunction mobile(value: string): boolean {\n    return /^1[3-9]\\d{9}$/.test(value);\n}\n\n/**\n * 验证URL格式\n */\nfunction url(value: string): boolean {\n    return /http(s)?:\\/\\/([\\w-]+\\.)+[\\w-]+(\\/[\\w-.\\/?%&=]*)?/.test(value);\n}\n\n/**\n * 验证日期格式\n */\nfunction date(value: string): boolean {\n    return !/Invalid|NaN/.test(new Date(value).toString());\n}\n\n/**\n * 验证ISO类型的日期格式\n */\nfunction dateISO(value: string): boolean {\n    return /^\\d{4}[\\/\\-](0?[1-9]|1[012])[\\/\\-](0?[1-9]|[12][0-9]|3[01])$/.test(value);\n}\n\n/**\n * 验证十进制数字\n */\nfunction number(value: string): boolean {\n    return /^[\\+-]?(\\d+\\.?\\d*|\\.\\d+|\\d\\.\\d+e\\+\\d+)$/.test(value);\n}\n\n/**\n * 验证整数\n */\nfunction digits(value: string): boolean {\n    return /^\\d+$/.test(value);\n}\n\n/**\n * 验证身份证号码\n */\nfunction idCard(value: string): boolean {\n    return /^[1-9]\\d{5}[1-9]\\d{3}((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d{3}([0-9]|X)$/.test(value);\n}\n\n/**\n * 是否车牌号\n */\nfunction carNo(value: string): boolean {\n    // 新能源车牌\n    const xreg =\n        /^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领A-Z]{1}[A-Z]{1}(([0-9]{5}[DF]$)|([DF][A-HJ-NP-Z0-9][0-9]{4}$))/;\n    // 旧车牌\n    const creg =\n        /^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领A-Z]{1}[A-Z]{1}[A-HJ-NP-Z0-9]{4}[A-HJ-NP-Z0-9挂学警港澳]{1}$/;\n    if (value.length === 7) {\n        return creg.test(value);\n    } else if (value.length === 8) {\n        return xreg.test(value);\n    } else {\n        return false;\n    }\n}\n\n/**\n * 金额,只允许2位小数\n */\nfunction amount(value: string): boolean {\n    //金额，只允许保留两位小数\n    return /^[1-9]\\d*(,\\d{3})*(\\.\\d{1,2})?$|^0\\.\\d{1,2}$/.test(value);\n}\n\n/**\n * 中文\n */\nfunction chinese(value: string): boolean {\n    let reg = /^[\\u4e00-\\u9fa5]+$/gi;\n    return reg.test(value);\n}\n\n/**\n * 只能输入字母\n */\nfunction letter(value: string): boolean {\n    return /^[a-zA-Z]*$/.test(value);\n}\n\n/**\n * 只能是字母或者数字\n */\nfunction enOrNum(value: string): boolean {\n    //英文或者数字\n    let reg = /^[0-9a-zA-Z]*$/g;\n    return reg.test(value);\n}\n\n/**\n * 验证是否包含某个值\n */\nfunction contains(value: string, param: string): boolean {\n    return value.indexOf(param) >= 0;\n}\n\n/**\n * 验证一个值范围[min, max]\n */\nfunction range(value: number, param: [number, number]): boolean {\n    return value >= param[0] && value <= param[1];\n}\n\n/**\n * 验证一个长度范围[min, max]\n */\nfunction rangeLength(value: string, param: [number, number]): boolean {\n    return value.length >= param[0] && value.length <= param[1];\n}\n\n/**\n * 是否固定电话\n */\nfunction landline(value: string): boolean {\n    let reg = /^\\d{3,4}-\\d{7,8}(-\\d{3,4})?$/;\n    return reg.test(value);\n}\n\n/**\n * 判断是否为空\n */\nfunction empty(value: any): boolean {\n    switch (typeof value) {\n        case 'undefined':\n            return true;\n        case 'string':\n            if (value.replace(/(^[ \\t\\n\\r]*)|([ \\t\\n\\r]*$)/g, '').length == 0) return true;\n            break;\n        case 'boolean':\n            if (!value) return true;\n            break;\n        case 'number':\n            if (0 === value || isNaN(value)) return true;\n            break;\n        case 'object':\n            if (null === value || value.length === 0) return true;\n            for (var i in value) {\n                return false;\n            }\n            return true;\n    }\n    return false;\n}\n\n/**\n * 是否json字符串\n */\nfunction jsonString(value: string): boolean {\n    if (typeof value == 'string') {\n        try {\n            var obj = JSON.parse(value);\n            if (typeof obj == 'object' && obj) {\n                return true;\n            } else {\n                return false;\n            }\n        } catch (e) {\n            return false;\n        }\n    }\n    return false;\n}\n\n/**\n * 是否数组\n */\nfunction array(value: any): boolean {\n    if (typeof Array.isArray === 'function') {\n        return Array.isArray(value);\n    } else {\n        return Object.prototype.toString.call(value) === '[object Array]';\n    }\n}\n\n/**\n * 是否对象\n */\nfunction object(value: any): boolean {\n    return Object.prototype.toString.call(value) === '[object Object]';\n}\n\n/**\n * 是否短信验证码\n */\nfunction code(value: string, len: number = 6): boolean {\n    return new RegExp(`^\\\\d{${len}}$`).test(value);\n}\n\n/**\n * 是否函数方法\n * @param {Object} value\n */\nfunction func(value) {\n    return typeof value === 'function';\n}\n\n/**\n * 是否promise对象\n * @param {Object} value\n */\nfunction promise(value) {\n    return object(value) && func(value.then) && func(value.catch);\n}\n\n/** 是否图片格式\n * @param {Object} value\n */\nfunction image(value) {\n    const newValue = value.split('?')[0];\n    const IMAGE_REGEXP = /\\.(jpeg|jpg|gif|png|svg|webp|jfif|bmp|dpg)/i;\n    return IMAGE_REGEXP.test(newValue);\n}\n\n/**\n * 是否视频格式\n * @param {Object} value\n */\nfunction video(value) {\n    const VIDEO_REGEXP = /\\.(mp4|mpg|mpeg|dat|asf|avi|rm|rmvb|mov|wmv|flv|mkv|m3u8)/i;\n    return VIDEO_REGEXP.test(value);\n}\n\n/**\n * 是否为正则对象\n * @param {Object}\n * @return {Boolean}\n */\nfunction regExp(o) {\n    return o && Object.prototype.toString.call(o) === '[object RegExp]';\n}\n\n/**\n * 验证字符串\n */\nfunction string(value) {\n    return typeof value === 'string';\n}\n\nexport default {\n    email,\n    mobile,\n    url,\n    date,\n    dateISO,\n    number,\n    digits,\n    idCard,\n    carNo,\n    amount,\n    chinese,\n    letter,\n    enOrNum,\n    contains,\n    range,\n    rangeLength,\n    empty,\n    isEmpty: empty,\n    jsonString,\n    landline,\n    object,\n    array,\n    code,\n    func,\n    promise,\n    video,\n    image,\n    regExp,\n    string\n};\n", "import validation from './test';\n\n/**\n * 添加单位，如果有rpx，%，px等单位结尾或者值为auto，直接返回，否则加上rpx单位结尾\n * @param value 输入值，可以为字符串或数字，默认'auto'\n * @param unit 单位，默认'rpx'\n * @returns 添加单位后的字符串\n */\nexport default function addUnit(value: string | number = 'auto', unit: string = 'rpx'): string {\n    const strValue = String(value);\n    // 用uView内置验证规则中的number判断是否为数值\n    return validation.number(strValue) ? `${strValue}${unit}` : strValue;\n}\n", "/**\n * 生成指定范围的随机整数\n * @param min 最小值（包含）\n * @param max 最大值（包含）\n * @returns 随机整数\n */\nfunction random(min: number, max: number): number {\n    if (min >= 0 && max > 0 && max >= min) {\n        const gab = max - min + 1;\n        return Math.floor(Math.random() * gab + min);\n    } else {\n        return 0;\n    }\n}\n\nexport default random;\n", "/**\n * 去除字符串空格\n * @param str 输入字符串\n * @param pos 去除位置，'both' | 'left' | 'right' | 'all'，默认'both'\n * @returns 去除空格后的字符串\n */\nfunction trim(str: string, pos: 'both' | 'left' | 'right' | 'all' = 'both'): string {\n    if (pos === 'both') {\n        return str.replace(/^\\s+|\\s+$/g, '');\n    } else if (pos === 'left') {\n        return str.replace(/^\\s*/, '');\n    } else if (pos === 'right') {\n        return str.replace(/(\\s*$)/g, '');\n    } else if (pos === 'all') {\n        return str.replace(/\\s+/g, '');\n    } else {\n        return str;\n    }\n}\n\nexport default trim;\n", "/**\n * 显示无图标的 Toast 提示\n * @param title 提示文本\n * @param option 显示时长（毫秒）默认1500 /显示图标，默认为none，\n */\nfunction toast(title: string, option: number | string | Record<string, any> = 1500): void {\n    uni.showToast({\n        title: title,\n        icon: typeof option === 'string' ? option : typeof option === 'object' ? option.icon || 'none' : 'none',\n        duration: typeof option === 'number' ? option : typeof option === 'object' ? option.duration || '1500' : 1500\n    });\n}\n\nexport default toast;\n", "// 获取父组件的参数，因为支付宝小程序不支持provide/inject的写法\n// this.$parent在非H5中，可以准确获取到父组件，但是在H5中，需要多次this.$parent.$parent.xxx\ninterface VueInstance {\n    $parent?: VueInstance;\n    $options?: { name?: string };\n    [key: string]: any;\n}\n\n/**\n * 获取父组件参数\n * @param this 当前组件实例\n * @param name 父组件name\n * @param keys 需要获取的参数名数组或对象\n * @returns 父组件参数对象\n */\nexport default function getParent(\n    this: VueInstance,\n    name: string,\n    keys: string[] | Record<string, any>\n): Record<string, any> {\n    let parent = this.$parent;\n    // 通过while历遍，这里主要是为了H5需要多层解析的问题\n    while (parent) {\n        // 父组件\n        if (parent.$options?.name !== name) {\n            // 如果组件的name不相等，继续上一级寻找\n            parent = parent.$parent;\n        } else {\n            const data: Record<string, any> = {};\n            // 判断keys是否数组，如果传过来的是一个数组，那么直接使用数组元素值当做键值去父组件寻找\n            if (Array.isArray(keys)) {\n                keys.forEach(val => {\n                    data[val] = parent?.[val] ? parent[val] : '';\n                });\n            } else {\n                // 历遍传过来的对象参数\n                for (const i in keys) {\n                    // 如果子组件有此值则用，无此值则用父组件的值\n                    // 判断是否空数组，如果是，则用父组件的值，否则用子组件的值\n                    if (Array.isArray(keys[i])) {\n                        if (keys[i].length) {\n                            data[i] = keys[i];\n                        } else {\n                            data[i] = parent[i];\n                        }\n                    } else if (keys[i] && keys[i].constructor === Object) {\n                        // 判断是否对象，如果是对象，且有属性，那么使用子组件的值，否则使用父组件的值\n                        if (Object.keys(keys[i]).length) {\n                            data[i] = keys[i];\n                        } else {\n                            data[i] = parent[i];\n                        }\n                    } else {\n                        // 只要子组件有传值，即使是false值，也是“传值”了，也需要覆盖父组件的同名参数\n                        data[i] = keys[i] || keys[i] === false ? keys[i] : parent[i];\n                    }\n                }\n            }\n            return data;\n        }\n    }\n    return {};\n}\n", "// 获取父组件的参数，因为支付宝小程序不支持provide/inject的写法\n// this.$parent在非H5中，可以准确获取到父组件，但是在H5中，需要多次this.$parent.$parent.xxx\n// 这里默认值等于undefined有它的含义，因为最顶层元素(组件)的$parent就是undefined，意味着不传name\n// 值(默认为undefined)，就是查找最顶层的$parent\nimport { type ComponentInternalInstance, getCurrentInstance } from 'vue';\n\nexport default function $parent(\n    componentName?: string,\n    _instance: ComponentInternalInstance | null | undefined = null\n) {\n    const instance: ComponentInternalInstance | null | undefined = _instance || getCurrentInstance();\n    let parent = instance && (instance.parent as ComponentInternalInstance | null | undefined);\n\n    if (!componentName) return parent;\n\n    while (parent) {\n        const name = (parent.type as any)?.name as string | undefined;\n        if (name === componentName) {\n            return parent;\n        }\n        parent = parent.parent;\n    }\n    return null;\n}\n", "/**\n * 获取当前操作系统平台\n * @returns 平台字符串，如 'ios'、'android'、'windows' 等\n */\nexport function os(): string {\n    return uni.getSystemInfoSync().platform;\n}\n\n/**\n * 获取系统信息\n * @returns uniapp 系统信息对象\n */\nexport function sys(): UniApp.GetSystemInfoResult {\n    return uni.getSystemInfoSync();\n}\n", "let timeout: ReturnType<typeof setTimeout> | null = null;\n\n/**\n * 防抖原理：一定时间内，只有最后一次操作，再过wait毫秒后才执行函数\n * @param func 要执行的回调函数\n * @param wait 延时的时间，单位ms，默认500\n * @param immediate 是否立即执行，默认false\n * @returns void\n */\nfunction debounce(func: () => void, wait: number = 500, immediate: boolean = false): void {\n    // 清除定时器\n    if (timeout !== null) clearTimeout(timeout);\n    // 立即执行，此类情况一般用不到\n    if (immediate) {\n        const callNow = !timeout;\n        timeout = setTimeout(() => {\n            timeout = null;\n        }, wait);\n        if (callNow) typeof func === 'function' && func();\n    } else {\n        // 设置定时器，当最后一次操作后，timeout不会再被清除，所以在延时wait毫秒后执行func回调方法\n        timeout = setTimeout(() => {\n            typeof func === 'function' && func();\n        }, wait);\n    }\n}\n\nexport default debounce;\n", "let timer: ReturnType<typeof setTimeout> | undefined;\nlet flag: boolean | undefined;\n/**\n * 节流原理：在一定时间内，只能触发一次\n * @param func 要执行的回调函数\n * @param wait 延时的时间，单位ms，默认500\n * @param immediate 是否立即执行，默认true\n * @returns void\n */\nfunction throttle(func: () => void, wait: number = 500, immediate: boolean = true): void {\n    if (immediate) {\n        if (!flag) {\n            flag = true;\n            // 如果是立即执行，则在wait毫秒内开始时执行\n            typeof func === 'function' && func();\n            timer = setTimeout(() => {\n                flag = false;\n            }, wait);\n        }\n    } else {\n        if (!flag) {\n            flag = true;\n            // 如果是非立即执行，则在wait毫秒内的结束处执行\n            timer = setTimeout(() => {\n                flag = false;\n                typeof func === 'function' && func();\n            }, wait);\n        }\n    }\n}\nexport default throttle;\n", "/**\n * 获取元素的位置信息\n * @param {any} selector 选择器\n * @param {boolean} all 是否获取所有匹配元素\n * @returns {Promise<any>} 返回一个 Promise，解析为元素的位置信息\n */\n\nimport { getCurrentInstance } from 'vue';\n\nexport default function (selector: any, _instance: any = null, all: boolean = false): Promise<any> {\n    const instance = _instance || getCurrentInstance();\n    return new Promise(resolve => {\n        uni.createSelectorQuery()\n            .in(instance?.proxy)\n            [all ? 'selectAll' : 'select'](selector)\n            .boundingClientRect((rect: any) => {\n                if (all && Array.isArray(rect) && rect.length) {\n                    resolve(rect);\n                }\n                if (!all && rect) {\n                    resolve(rect);\n                }\n            })\n            .exec();\n    });\n}\n", "import { type ComponentInternalInstance, getCurrentInstance } from 'vue';\n\nexport function parent(componentName?: string, _instance: ComponentInternalInstance | null | undefined = null) {\n    const instance = _instance || getCurrentInstance();\n\n    let parent = instance && (instance.parent as ComponentInternalInstance | null | undefined);\n\n    while (parent) {\n        const name = (parent.type as any)?.name as string | undefined;\n        if (name === componentName) {\n            return parent;\n        }\n        parent = parent.parent;\n    }\n    return null;\n}\nexport function parentData(componentName?: string, _instance: ComponentInternalInstance | null | undefined = null) {\n    const instance = _instance || getCurrentInstance();\n    const findParent = parent(componentName, instance);\n    return findParent ? findParent.exposed : null;\n}\n", "{\n    \"id\": \"uview-pro\",\n    \"name\": \"uview-pro\",\n    \"displayName\": \"【Vue3重构版】uView Pro｜基于Vue3+TS全面重构的70+精选UI组件库\",\n    \"version\": \"0.2.4\",\n    \"description\": \"uView Pro，是全面支持Vue3的uni-app生态框架，70+精选组件已使用TypeScript重构，已全面支持uni-app Vue3.0\",\n    \"main\": \"index.ts\",\n    \"module\": \"index.ts\",\n    \"browser\": \"index.ts\",\n    \"keywords\": [\n        \"uni-app\",\n        \"library\",\n        \"component\",\n        \"uView\",\n        \"Vue3\"\n    ],\n    \"author\": \"anyup\",\n    \"license\": \"MIT\",\n    \"repository\": \"https://github.com/anyup/uview-pro\",\n    \"engines\": {\n        \"HBuilderX\": \"^4.07\",\n        \"uni-app\": \"^4.07\",\n        \"uni-app-x\": \"\"\n    },\n    \"dcloudext\": {\n        \"type\": \"component-vue\",\n        \"sale\": {\n            \"regular\": {\n                \"price\": \"0.00\"\n            },\n            \"sourcecode\": {\n                \"price\": \"0.00\"\n            }\n        },\n        \"contact\": {\n            \"qq\": \"491302297\"\n        },\n        \"declaration\": {\n            \"ads\": \"无\",\n            \"data\": \"无\",\n            \"permissions\": \"无\"\n        },\n        \"npmurl\": \"https://www.npmjs.com/package/uview-pro\",\n        \"darkmode\": \"x\",\n        \"i18n\": \"x\",\n        \"widescreen\": \"x\"\n    },\n    \"uni_modules\": {\n        \"dependencies\": [],\n        \"encrypt\": [],\n        \"platforms\": {\n            \"cloud\": {\n                \"tcb\": \"√\",\n                \"aliyun\": \"√\",\n                \"alipay\": \"√\"\n            },\n            \"client\": {\n                \"uni-app\": {\n                    \"vue\": {\n                        \"vue2\": \"x\",\n                        \"vue3\": \"√\"\n                    },\n                    \"web\": {\n                        \"safari\": \"√\",\n                        \"chrome\": \"√\"\n                    },\n                    \"app\": {\n                        \"vue\": \"√\",\n                        \"nvue\": \"-\",\n                        \"android\": \"√\",\n                        \"ios\": \"√\",\n                        \"harmony\": \"-\"\n                    },\n                    \"mp\": {\n                        \"weixin\": \"√\",\n                        \"alipay\": \"-\",\n                        \"toutiao\": \"-\",\n                        \"baidu\": \"-\",\n                        \"kuaishou\": \"-\",\n                        \"jd\": \"-\",\n                        \"harmony\": \"-\",\n                        \"qq\": \"-\",\n                        \"lark\": \"-\"\n                    },\n                    \"quickapp\": {\n                        \"huawei\": \"-\",\n                        \"union\": \"-\"\n                    }\n                },\n                \"uni-app-x\": {\n                    \"web\": {\n                        \"safari\": \"-\",\n                        \"chrome\": \"-\"\n                    },\n                    \"app\": {\n                        \"android\": \"-\",\n                        \"ios\": \"-\",\n                        \"harmony\": \"-\"\n                    },\n                    \"mp\": {\n                        \"weixin\": \"-\"\n                    }\n                }\n            }\n        }\n    }\n}\n", "// 此版本发布于2023-03-27\n/**\n * 组件库配置项类型定义\n */\n\nimport { version } from '../../package.json';\n\nexport interface AppConfig {\n    /** 版本号 */\n    v: string;\n    /** 版本号（冗余字段） */\n    version: string;\n    /** 主题名称列表 */\n    type: string[];\n}\n\n// const version: string = '1.8.8';\n\nconst config: AppConfig = {\n    v: version,\n    version: version,\n    // 主题名称\n    type: ['primary', 'success', 'info', 'error', 'warning']\n};\n\nexport default config;\n", "// uniapp在H5中各API的z-index值如下：\n/**\n * actionsheet: 999\n * modal: 999\n * navigate: 998\n * tabbar: 998\n * toast: 999\n */\n\n/**\n * 组件库 z-index 配置项类型定义\n */\nexport interface ZIndexConfig {\n    toast: number;\n    noNetwork: number;\n    /** popup包含popup，actionsheet，keyboard，picker的值 */\n    popup: number;\n    mask: number;\n    navbar: number;\n    topTips: number;\n    sticky: number;\n    indexListSticky: number;\n}\n\nconst zIndex: ZIndexConfig = {\n    toast: 10090,\n    noNetwork: 10080,\n    // popup包含popup，actionsheet，keyboard，picker的值\n    popup: 10075,\n    mask: 10070,\n    navbar: 980,\n    topTips: 975,\n    sticky: 970,\n    indexListSticky: 965\n};\n\nexport default zIndex;\n", "import { getCurrentInstance, type ComponentInternalInstance } from 'vue';\n\n/**\n * 适用于 uni-app Vue3 的事件派发/广播工具\n * 用法：import { dispatch, broadcast } from './emitter'\n */\n\n/**\n * 向上查找父组件并派发事件\n * @param instance 当前组件实例（setup中可用getCurrentInstance()）\n * @param componentName 目标组件名\n * @param eventName 事件名\n * @param params 参数\n */\n\n// 将事件名转换为驼峰格式\n// 例如：on-form-change -> onFormChange\nfunction formatToCamelCase(str: string): string {\n    return str.replace(/-([a-z])/g, function (g) {\n        return g[1].toUpperCase();\n    });\n}\n\n/**\n * 向上查找父组件\n * @param instance 当前组件实例（setup中可用getCurrentInstance()）\n * @param componentName 目标组件名\n * @returns 父组件实例\n */\nfunction parent(instance: ComponentInternalInstance | null | undefined = undefined, componentName: string = '') {\n    if (!instance) {\n        instance = getCurrentInstance();\n    }\n    let parent = instance && (instance.parent as ComponentInternalInstance | null | undefined);\n\n    if (!componentName) return parent;\n    while (parent) {\n        const name = (parent.type as any)?.name as string | undefined;\n        if (name === componentName) {\n            return parent;\n        }\n        parent = parent.parent;\n    }\n    return null;\n}\n\n/** * 向上查找父组件并派发事件\n * @param instance 当前组件实例（setup中可用getCurrentInstance()）\n * @param componentName 目标组件名\n * @param eventName 事件名\n * @param params 参数\n */\nfunction dispatch(\n    instance: ComponentInternalInstance | null | undefined,\n    componentName: string,\n    eventName: string,\n    ...params: any[]\n) {\n    let parent = instance && (instance.parent as ComponentInternalInstance | null | undefined);\n    while (parent) {\n        const name = (parent.type as any)?.name as string | undefined;\n        if (name === componentName) {\n            // 找到目标组件，派发事件\n            // Vue3未解决，目标组件事件监听失效，待优化，暂时使用下面的方式解决，如果你有好的方式也可以告诉我或者提PR\n            parent.emit && parent.emit(eventName, ...params);\n            // 如果有对应的方法，执行方法\n            // 这里可以考虑将 eventName 转换为驼峰格式\n            // 例如：on-form-change -> onFormChange\n            parent.exposed?.[formatToCamelCase(eventName)] && parent.exposed[formatToCamelCase(eventName)](...params);\n            break;\n        }\n        parent = parent.parent;\n    }\n}\n\n/**\n * 向下递归查找子组件并广播事件\n * @param instance 当前组件实例（setup中可用getCurrentInstance()）\n * @param componentName 目标组件名\n * @param eventName 事件名\n * @param params 参数\n */\nfunction broadcast(\n    instance: ComponentInternalInstance | null | undefined,\n    componentName: string,\n    eventName: string,\n    ...params: any[]\n) {\n    if (!instance) return;\n    const subTree = (instance.subTree as any)?.children || [];\n    const children = Array.isArray(subTree) ? subTree : [subTree];\n    children.forEach((vnode: any) => {\n        const child = vnode.component as ComponentInternalInstance | undefined;\n\n        if (child) {\n            const name = (child.type as any)?.name as string | undefined;\n            if (name === componentName) {\n                // 找到目标组件，广播事件\n                // Vue3未解决，目标组件事件监听失效，待优化，暂时使用下面的方式解决，如果你有好的方式也可以告诉我或者提PR\n                child.emit && child.emit(eventName, ...params);\n                // 如果有对应的方法，执行方法\n                // 这里可以考虑将 eventName 转换为驼峰格式\n                // 例如：on-form-change -> onFormChange\n                child.exposed?.[formatToCamelCase(eventName)] && child.exposed[formatToCamelCase(eventName)](...params);\n            } else {\n                broadcast(child, componentName, eventName, ...params);\n            }\n        }\n    });\n}\n\nexport { dispatch, broadcast, parent };\n", "/* eslint-disable @typescript-eslint/no-non-null-assertion */\n/**\n * copy to https://github.com/developit/mitt\n * Expand clear method\n */\nexport type EventType = string | symbol;\n\n// An event handler can take an optional event argument\n// and should not return a value\nexport type Handler<T = unknown> = (event: T) => void;\nexport type WildcardHandler<T = Record<string, unknown>> = (type: keyof T, event: T[keyof T]) => void;\n\n// An array of all currently registered event handlers for a type\nexport type EventHandlerList<T = unknown> = Array<Handler<T>>;\nexport type WildCardEventHandlerList<T = Record<string, unknown>> = Array<WildcardHandler<T>>;\n\n// A map of event types and their corresponding event handlers.\nexport type EventHandlerMap<Events extends Record<EventType, unknown>> = Map<\n    '*' | keyof Events,\n    EventHandlerList<Events[keyof Events]> | WildCardEventHandlerList<Events>\n>;\n\nexport interface Emitter<Events extends Record<EventType, unknown>> {\n    all: EventHandlerMap<Events>;\n\n    on<Key extends keyof Events>(type: Key, handler: Handler<Events[Key]>): void;\n    on(type: '*', handler: WildcardHandler<Events>): void;\n\n    off<Key extends keyof Events>(type: Key, handler?: Handler<Events[Key]>): void;\n    off(type: '*', handler: WildcardHandler<Events>): void;\n\n    emit<Key extends keyof Events>(type: Key, event: Events[Key]): void;\n    emit<Key extends keyof Events>(type: undefined extends Events[Key] ? Key : never): void;\n    clear(): void;\n}\n\n/**\n * Mitt: Tiny (~200b) functional event emitter / pubsub.\n * @name mitt\n * @returns {Mitt}\n */\nexport function mitt<Events extends Record<EventType, unknown>>(all?: EventHandlerMap<Events>): Emitter<Events> {\n    type GenericEventHandler = Handler<Events[keyof Events]> | WildcardHandler<Events>;\n    all = all || new Map();\n\n    return {\n        /**\n         * A Map of event names to registered handler functions.\n         */\n        all,\n\n        /**\n         * Register an event handler for the given type.\n         * @param {string|symbol} type Type of event to listen for, or `'*'` for all events\n         * @param {Function} handler Function to call in response to given event\n         * @memberOf mitt\n         */\n        on<Key extends keyof Events>(type: Key, handler: GenericEventHandler) {\n            const handlers: Array<GenericEventHandler> | undefined = all!.get(type);\n            if (handlers) {\n                handlers.push(handler);\n            } else {\n                all!.set(type, [handler] as EventHandlerList<Events[keyof Events]>);\n            }\n        },\n\n        /**\n         * Remove an event handler for the given type.\n         * If `handler` is omitted, all handlers of the given type are removed.\n         * @param {string|symbol} type Type of event to unregister `handler` from (`'*'` to remove a wildcard handler)\n         * @param {Function} [handler] Handler function to remove\n         * @memberOf mitt\n         */\n        off<Key extends keyof Events>(type: Key, handler?: GenericEventHandler) {\n            const handlers: Array<GenericEventHandler> | undefined = all!.get(type);\n            if (handlers) {\n                if (handler) {\n                    handlers.splice(handlers.indexOf(handler) >>> 0, 1);\n                } else {\n                    all!.set(type, []);\n                }\n            }\n        },\n\n        /**\n         * Invoke all handlers for the given type.\n         * If present, `'*'` handlers are invoked after type-matched handlers.\n         *\n         * Note: Manually firing '*' handlers is not supported.\n         *\n         * @param {string|symbol} type The event type to invoke\n         * @param {Any} [evt] Any value (object is recommended and powerful), passed to each handler\n         * @memberOf mitt\n         */\n        emit<Key extends keyof Events>(type: Key, evt?: Events[Key]) {\n            let handlers = all!.get(type);\n            if (handlers) {\n                [...(handlers as EventHandlerList<Events[keyof Events]>)].forEach(handler => {\n                    handler(evt as Events[Key]);\n                });\n            }\n\n            handlers = all!.get('*');\n            if (handlers) {\n                [...(handlers as WildCardEventHandlerList<Events>)].forEach(handler => {\n                    handler(type, evt as Events[Key]);\n                });\n            }\n        },\n\n        /**\n         * Clear all\n         */\n        clear() {\n            this.all.clear();\n        }\n    };\n}\n", "import deepMerge from '../function/deepMerge';\n\n/**\n * 请求配置项Meta类型定义\n */\nexport interface RequestMeta {\n    toast?: boolean;\n    loading?: boolean;\n    originalData?: boolean;\n    [key: string]: any;\n}\n\n/**\n * 请求配置项类型定义\n */\nexport interface RequestConfig {\n    baseUrl?: string;\n    header?: Record<string, any>;\n    method?: string;\n    dataType?: string;\n    responseType?: string;\n    meta?: RequestMeta;\n}\n\n/**\n * 请求拦截器类型定义\n */\nexport interface RequestInterceptor {\n    request?: ((options: RequestOptions) => RequestOptions | false) | null;\n    response?: ((response: any) => any | false) | null;\n}\n\n/**\n * 请求参数类型定义\n */\nexport interface RequestOptions {\n    url: string;\n    header: Record<string, any>;\n    method: 'GET' | 'POST' | 'OPTIONS' | 'HEAD' | 'PUT' | 'DELETE' | 'TRACE' | 'CONNECT';\n    data?: any;\n    dataType?: string;\n    responseType?: string;\n    params?: Record<string, any>;\n    complete?: (response: any) => void;\n    meta?: RequestMeta;\n}\n\nexport class Request {\n    public config: RequestConfig;\n    public interceptor: RequestInterceptor;\n    public options?: RequestOptions;\n\n    constructor() {\n        this.config = {\n            baseUrl: '', // 请求的根域名\n            header: {}, // 默认的请求头\n            method: 'POST', // 请求方式\n            dataType: 'json', // 设置为json，返回后uni.request会对数据进行一次JSON.parse\n            responseType: 'text', // 此参数无需处理，因为5+和支付宝小程序不支持，默认为text即可\n            meta: {\n                originalData: true, // 是否在拦截器中返回服务端的原始数据，见文档说明\n                toast: false, // 是否在请求出错时，弹出toast\n                loading: false // 是否显示加载中\n            }\n        };\n        this.interceptor = {\n            request: null,\n            response: null\n        };\n    }\n    /**\n     * 设置全局默认配置\n     * @param customConfig 自定义配置\n     */\n    setConfig(customConfig: Partial<RequestConfig>): void {\n        this.config = deepMerge(this.config, customConfig);\n    }\n\n    /**\n     * 主要请求部分\n     * @param options 请求参数\n     */\n    request<T = unknown>(options: RequestOptions): Promise<T> {\n        // 合并 meta 配置，优先级：单次请求 > 全局\n        const mergedMeta: RequestMeta = {\n            ...this.config.meta,\n            ...(options.meta || {})\n        };\n        // 让 options.meta 传递到拦截器\n        options.meta = mergedMeta;\n\n        if (this.interceptor.request && typeof this.interceptor.request === 'function') {\n            const interceptorRequest = this.interceptor.request(options);\n            if (interceptorRequest === false) {\n                // 返回一个处于pending状态中的Promise，来取消原promise，避免进入then()回调\n                return new Promise(() => {});\n            }\n            this.options = interceptorRequest;\n        }\n        options.dataType = options.dataType || this.config.dataType;\n        options.responseType = options.responseType || this.config.responseType;\n        options.url = options.url || '';\n        options.params = options.params || {};\n        options.header = Object.assign({}, this.config.header, options.header);\n        options.method = (options.method || this.config.method) as RequestOptions['method'];\n        // 保证 url 一定为 string\n        if (!options.url) options.url = '';\n\n        return new Promise<T>((resolve, reject) => {\n            options.complete = (response: any) => {\n                // 读取 meta 配置\n                const meta = options.meta || this.config.meta || {};\n                const originalData = meta.originalData ?? false;\n                // 拦截器处理，加入request的配置参数\n                response.config = options;\n                if (originalData) {\n                    // 判断是否存在拦截器\n                    if (this.interceptor.response && typeof this.interceptor.response === 'function') {\n                        const resInterceptors = this.interceptor.response(response);\n                        // 如果拦截器不返回false，就将拦截器返回的内容给请求的then回调\n                        if (resInterceptors !== false) {\n                            resolve(resInterceptors);\n                        } else {\n                            // 如果拦截器返回false，意味着拦截器定义者认为返回有问题，直接接入catch回调\n                            reject(response);\n                        }\n                    } else {\n                        // 如果要求返回原始数据，就算没有拦截器，也返回最原始的数据\n                        resolve(response);\n                    }\n                } else {\n                    if (response.statusCode === 200) {\n                        if (this.interceptor.response && typeof this.interceptor.response === 'function') {\n                            const resInterceptors = this.interceptor.response(response.data);\n                            if (resInterceptors !== false) {\n                                resolve(resInterceptors);\n                            } else {\n                                reject(response.data);\n                            }\n                        } else {\n                            // 如果不是返回原始数据(originalData=false)，且没有拦截器的情况下，返回纯数据给then回调\n                            resolve(response.data);\n                        }\n                    } else {\n                        reject(response);\n                    }\n                }\n            };\n            // 判断用户传递的URL是否http开头\n            options.url =\n                options.url && options.url.indexOf('http') !== 0\n                    ? this.config.baseUrl + (options.url.indexOf('/') === 0 ? options.url : `/${options.url}`)\n                    : options.url;\n            uni.request(options);\n        });\n    }\n\n    get<T = unknown>(\n        url: string,\n        data: any = {},\n        options: { header?: Record<string, any>; meta?: RequestMeta } = {}\n    ): Promise<T> {\n        return this.request<T>({\n            method: 'GET',\n            url,\n            data,\n            header: options.header,\n            meta: options.meta\n        });\n    }\n\n    post<T = unknown>(\n        url: string,\n        data: any = {},\n        options: { header?: Record<string, any>; meta?: RequestMeta } = {}\n    ): Promise<T> {\n        return this.request<T>({\n            url,\n            method: 'POST',\n            data,\n            header: options.header,\n            meta: options.meta\n        });\n    }\n\n    put<T = unknown>(\n        url: string,\n        data: any = {},\n        options: { header?: Record<string, any>; meta?: RequestMeta } = {}\n    ): Promise<T> {\n        return this.request<T>({\n            url,\n            method: 'PUT',\n            data,\n            header: options.header,\n            meta: options.meta\n        });\n    }\n\n    delete<T = unknown>(\n        url: string,\n        data: any = {},\n        options: { header?: Record<string, any>; meta?: RequestMeta } = {}\n    ): Promise<T> {\n        return this.request<T>({\n            url,\n            method: 'DELETE',\n            data,\n            header: options.header,\n            meta: options.meta\n        });\n    }\n}\n\n// 插件化导出，支持 app.use(http, { interceptor })\nconst httpInstance = new Request();\n\ninterface HttpPluginOptions {\n    requestConfig?: Partial<RequestConfig>;\n    interceptor?: RequestInterceptor;\n}\n\n// 全局导出，支持 import { httpPlugin } from 'uview-pro'\nconst httpPlugin = {\n    install(app: any, options: HttpPluginOptions = {}) {\n        if (options.interceptor) {\n            const { request, response } = options.interceptor;\n            if (request) httpInstance.interceptor.request = request;\n            if (response) httpInstance.interceptor.response = response;\n        }\n        if (options.requestConfig) {\n            httpInstance.setConfig(options.requestConfig);\n        }\n        app.config.globalProperties.$http = httpInstance;\n    }\n};\n\n// 全局导出，支持 import { http } from 'uview-pro'\nexport { httpInstance as http };\n\n// 插件化导出，支持 app.use(http, { interceptor })\nexport default httpPlugin;\n", "// utils/useComponent.ts\nimport { ref, reactive, getCurrentInstance, onUnmounted, nextTick, computed } from 'vue';\nimport { logger } from '../util/logger';\nimport { mitt } from '../util/mitt';\n\n// 简化类型定义\ninterface ParentContext {\n    name: string;\n    uid: string; // 添加唯一ID\n    addChild: (child: ChildContext) => void;\n    removeChild: (childId: string) => void;\n    broadcast: (event: string, data?: any) => void;\n    getChildren: () => ChildContext[];\n    getExposed: () => Record<string, any>;\n    getChildExposed: (childId: string) => Record<string, any>;\n    getChildrenExposed: () => Array<{ id: string; name: string; exposed: Record<string, any> }>;\n}\n\ninterface ChildContext {\n    id: string;\n    uid: string; // 添加唯一ID\n    name: string;\n    emitToParent: (event: string, data?: any) => void;\n    getParentExposed: () => Record<string, any>;\n    getInstance: () => any;\n    getExposed: () => Record<string, any>;\n}\n\n// 全局存储 - 改为页面级别存储\nconst pageComponentMaps = new Map<\n    string,\n    {\n        parentMap: Map<string, ParentContext>;\n        childMap: Map<string, ChildContext>;\n    }\n>();\n\n// 获取当前页面的组件映射\nfunction getCurrentPageMaps() {\n    // 在uniapp中，可以通过getCurrentPages()获取当前页面路径\n    const pages = getCurrentPages();\n    const currentPage = pages[pages.length - 1];\n    const pagePath = currentPage?.route || 'default';\n\n    if (!pageComponentMaps.has(pagePath)) {\n        pageComponentMaps.set(pagePath, {\n            parentMap: new Map<string, ParentContext>(),\n            childMap: new Map<string, ChildContext>()\n        });\n    }\n\n    return pageComponentMaps.get(pagePath)!;\n}\n\n// 清理指定页面的组件关系\nfunction cleanupPageComponentRelations(pagePath: string) {\n    if (pageComponentMaps.has(pagePath)) {\n        const pageMaps = pageComponentMaps.get(pagePath)!;\n        pageMaps.parentMap.clear();\n        pageMaps.childMap.clear();\n        pageComponentMaps.delete(pagePath);\n        logger.log(`Cleaned up component relations for page: ${pagePath}`);\n    }\n}\n\n// 事件常量\nconst PARENT_REGISTERED_EVENT = 'parent:registered';\nconst PARENT_UNMOUNTED_EVENT = 'parent:unmounted';\nconst CHILD_REGISTERED_EVENT = 'child:registered';\n\n// 创建事件总线实例\ntype EventBusEvents = {\n    [PARENT_REGISTERED_EVENT]: { name: string; parent: ParentContext; pagePath: string };\n    [PARENT_UNMOUNTED_EVENT]: { name: string; pagePath: string };\n    [CHILD_REGISTERED_EVENT]: { id: string; name: string; parentName: string; pagePath: string };\n    [key: `parent:${string}:${string}`]: { data?: any; childId: string; childName: string; pagePath: string };\n    [key: `child:${string}:${string}`]: any;\n};\n\nconst eventBus = mitt<EventBusEvents>();\n\n// 热更新重新注册管理器\nlet isHotReloading = false;\nconst hotReloadReconnectCallbacks: Map<string, Function[]> = new Map();\n\n/**\n * 注册热更新重新连接回调\n */\nfunction registerHotReloadReconnect(key: string, callback: Function): void {\n    if (!hotReloadReconnectCallbacks.has(key)) {\n        hotReloadReconnectCallbacks.set(key, []);\n    }\n    hotReloadReconnectCallbacks.get(key)!.push(callback);\n}\n\n/**\n * 注销热更新重新连接回调\n */\nfunction unregisterHotReloadReconnect(key: string, callback: Function): void {\n    const callbacks = hotReloadReconnectCallbacks.get(key);\n    if (callbacks) {\n        const index = callbacks.indexOf(callback);\n        if (index > -1) {\n            callbacks.splice(index, 1);\n        }\n        if (callbacks.length === 0) {\n            hotReloadReconnectCallbacks.delete(key);\n        }\n    }\n}\n\n/**\n * 执行热更新重新连接\n */\nfunction executeHotReloadReconnect(): void {\n    logger.log('Executing hot reload reconnection for all registered callbacks');\n    hotReloadReconnectCallbacks.forEach((callbacks, key) => {\n        callbacks.forEach(callback => {\n            try {\n                callback();\n                logger.log(`Successfully reconnected: ${key}`);\n            } catch (error) {\n                logger.warn(`Failed to reconnect ${key}:`, error);\n            }\n        });\n    });\n}\n\n// 热更新清理函数\nexport function cleanupComponentRelations(): void {\n    logger.log('Cleaning up component relations for hot reload');\n    pageComponentMaps.clear();\n    eventBus.clear();\n}\n\n// 热更新处理\nif (import.meta.hot) {\n    import.meta.hot.accept(() => {\n        isHotReloading = true;\n        logger.log('Hot reload detected, starting reconnection process');\n\n        // 第一步：清理旧的组件关系\n        setTimeout(() => {\n            cleanupComponentRelations();\n\n            // 第二步：执行重新连接\n            setTimeout(() => {\n                executeHotReloadReconnect();\n                isHotReloading = false;\n                logger.log('Hot reload reconnection completed');\n            }, 100); // 增加延迟确保组件已重新创建\n        }, 50);\n    });\n}\n\n/**\n * 生成实例唯一ID\n */\nfunction generateInstanceId(componentName: string): string {\n    return `${componentName}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n}\n\n/**\n * 生成组件唯一UID\n */\nfunction generateComponentUid(): string {\n    return `uid_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n}\n\n/**\n * 获取当前页面路径\n */\nfunction getCurrentPagePath(): string {\n    // 在uniapp中获取当前页面路径\n    try {\n        const pages = getCurrentPages();\n        const currentPage = pages[pages.length - 1];\n        return currentPage?.route || 'default';\n    } catch (error) {\n        return 'default';\n    }\n}\n\n/**\n * 父组件 Hook\n */\nexport function useParent(componentName: string) {\n    const instance = getCurrentInstance();\n    if (!instance) {\n        throw new Error('useParent must be called within setup function');\n    }\n\n    if (!componentName) {\n        throw new Error('Component name is required for useParent');\n    }\n\n    const pagePath = getCurrentPagePath();\n    const pageMaps = getCurrentPageMaps();\n\n    // 生成父组件唯一UID\n    const parentUid = generateComponentUid();\n\n    // 使用组合名称：组件名 + UID，确保唯一性\n    const uniqueParentName = `${componentName}-${parentUid}`;\n\n    // 热更新时清理旧的父组件\n    if (pageMaps.parentMap.has(uniqueParentName)) {\n        logger.log(`Cleaning up existing parent ${uniqueParentName} for hot reload on page ${pagePath}`);\n        pageMaps.parentMap.delete(uniqueParentName);\n    }\n\n    const children = reactive<ChildContext[]>([]);\n\n    // 父组件上下文\n    const parentContext: ParentContext = {\n        name: uniqueParentName, // 使用唯一名称\n        uid: parentUid, // 添加唯一ID\n\n        addChild(child: ChildContext) {\n            if (!children.find(c => c.id === child.id)) {\n                children.push(child);\n                logger.log(`Parent ${uniqueParentName} on page ${pagePath} added child: ${child.name}`);\n            }\n        },\n\n        removeChild(childId: string) {\n            const index = children.findIndex(c => c.id === childId);\n            if (index > -1) {\n                children.splice(index, 1);\n                logger.log(`Parent ${uniqueParentName} on page ${pagePath} removed child: ${childId}`);\n            }\n        },\n\n        broadcast(event: string, data?: any) {\n            logger.log(`Parent ${uniqueParentName} on page ${pagePath} broadcasting event: ${event}`);\n            children.forEach(child => {\n                eventBus.emit(`child:${child.id}:${event}`, data);\n            });\n        },\n\n        getChildren() {\n            return [...children];\n        },\n\n        getExposed() {\n            return instance.exposed || {};\n        },\n\n        getChildExposed(childId: string) {\n            const child = children.find(c => c.id === childId);\n            if (child && child.getExposed) {\n                return child.getExposed();\n            }\n            logger.warn(`Child ${childId} not found or does not have getExposed method on page ${pagePath}`);\n            return {};\n        },\n\n        getChildrenExposed() {\n            return children\n                .filter(child => child.getExposed)\n                .map(child => {\n                    const exposed = child.getExposed();\n                    return {\n                        id: child.id,\n                        name: child.name,\n                        exposed: exposed\n                    };\n                })\n                .filter(item => Object.keys(item.exposed).length > 0);\n        }\n    };\n\n    // 注册父组件并广播事件\n    pageMaps.parentMap.set(uniqueParentName, parentContext);\n    logger.log(`Parent ${uniqueParentName} registered on page ${pagePath}`);\n\n    // 广播父组件注册事件（包含页面路径信息）\n    eventBus.emit(PARENT_REGISTERED_EVENT, {\n        name: uniqueParentName,\n        parent: parentContext,\n        pagePath\n    });\n\n    // 组件卸载时清理\n    onUnmounted(() => {\n        pageMaps.parentMap.delete(uniqueParentName);\n        eventBus.emit(PARENT_UNMOUNTED_EVENT, {\n            name: uniqueParentName,\n            pagePath\n        });\n        logger.log(`Parent ${uniqueParentName} unmounted from page ${pagePath}`);\n    });\n\n    return {\n        parentName: uniqueParentName, // 返回唯一名称\n        parentUid, // 返回唯一ID\n        children,\n        broadcast: parentContext.broadcast,\n        getChildren: parentContext.getChildren,\n        getChildExposed: parentContext.getChildExposed,\n        getChildrenExposed: parentContext.getChildrenExposed,\n        pagePath\n    };\n}\n\n/**\n * 子组件 Hook\n */\nexport function useChildren(componentName: string, parentName: string) {\n    const instance = getCurrentInstance();\n    if (!instance) {\n        throw new Error('useChildren must be called within setup function');\n    }\n\n    if (!componentName || !parentName) {\n        throw new Error('Component name and parent name are required for useChildren');\n    }\n\n    const pagePath = getCurrentPagePath();\n    const pageMaps = getCurrentPageMaps();\n    const instanceId = generateInstanceId(componentName);\n    const childUid = generateComponentUid(); // 生成子组件唯一UID\n    const parentRef = ref<ParentContext | null>(null);\n    const parentExposed = ref<Record<string, any>>({});\n\n    // 热更新时清理旧的子组件\n    if (pageMaps.childMap.has(instanceId)) {\n        logger.log(`Cleaning up existing child ${componentName} for hot reload on page ${pagePath}`);\n        pageMaps.childMap.delete(instanceId);\n    }\n\n    // 获取父组件暴露内容\n    const getParentExposed = (): Record<string, any> => {\n        if (parentRef.value) {\n            const exposed = parentRef.value.getExposed();\n            parentExposed.value = exposed;\n            return exposed;\n        }\n        return {};\n    };\n\n    // 获取子组件exposed内容\n    const getExposed = (): Record<string, any> => {\n        return instance.exposed || {};\n    };\n\n    // 链接到父组件（只在当前页面查找）\n    const linkParent = (): boolean => {\n        // 在当前页面中查找匹配的父组件\n        let parent: ParentContext | undefined;\n\n        // 首先尝试精确匹配\n        parent = pageMaps.parentMap.get(parentName);\n\n        // 如果精确匹配失败，尝试前缀匹配（支持向后兼容）\n        if (!parent) {\n            for (const [key, value] of pageMaps.parentMap.entries()) {\n                if (key.startsWith(parentName + '-')) {\n                    parent = value;\n                    break;\n                }\n            }\n        }\n\n        if (parent) {\n            parentRef.value = parent;\n            parent.addChild(childContext);\n            getParentExposed();\n            logger.log(`Child ${componentName} linked to parent ${parent.name} on page ${pagePath}`);\n            return true;\n        }\n        return false;\n    };\n\n    // 子组件上下文\n    const childContext: ChildContext = {\n        id: instanceId,\n        uid: childUid, // 添加唯一ID\n        name: componentName,\n\n        emitToParent(event: string, data?: any) {\n            if (parentRef.value) {\n                eventBus.emit(`parent:${parentRef.value.name}:${event}`, {\n                    data,\n                    childId: instanceId,\n                    childName: componentName,\n                    pagePath\n                });\n            }\n        },\n\n        getParentExposed,\n        getInstance() {\n            return instance;\n        },\n        getExposed\n    };\n\n    // 注册子组件\n    pageMaps.childMap.set(instanceId, childContext);\n    logger.log(`Child ${componentName} registered on page ${pagePath}`);\n\n    // 广播子组件注册事件\n    eventBus.emit(CHILD_REGISTERED_EVENT, {\n        id: instanceId,\n        name: componentName,\n        parentName: parentName,\n        pagePath\n    });\n\n    // 立即尝试连接父组件\n    let connected = linkParent();\n\n    // 如果没连接上，监听父组件注册事件（只监听当前页面的父组件）\n    if (!connected) {\n        const parentRegisteredHandler = (eventData: { name: string; parent: ParentContext; pagePath: string }) => {\n            // 检查是否是我们要连接的父组件（精确匹配或前缀匹配）\n            if (\n                (eventData.name === parentName || eventData.name.startsWith(parentName + '-')) &&\n                eventData.pagePath === pagePath\n            ) {\n                connected = linkParent();\n                if (connected) {\n                    eventBus.off(PARENT_REGISTERED_EVENT, parentRegisteredHandler);\n                }\n            }\n        };\n        eventBus.on(PARENT_REGISTERED_EVENT, parentRegisteredHandler);\n    }\n\n    // 监听父组件卸载事件（只监听当前页面的父组件）\n    const parentUnmountedHandler = (eventData: { name: string; pagePath: string }) => {\n        if (\n            (eventData.name === parentName || eventData.name.startsWith(parentName + '-')) &&\n            eventData.pagePath === pagePath &&\n            parentRef.value\n        ) {\n            parentRef.value = null;\n            parentExposed.value = {};\n            logger.log(`Parent ${parentName} unmounted from page ${pagePath}, child ${componentName} disconnected`);\n        }\n    };\n    eventBus.on(PARENT_UNMOUNTED_EVENT, parentUnmountedHandler);\n\n    // 组件卸载时清理\n    onUnmounted(() => {\n        if (parentRef.value) {\n            parentRef.value.removeChild(instanceId);\n        }\n        pageMaps.childMap.delete(instanceId);\n        eventBus.off(PARENT_REGISTERED_EVENT);\n        eventBus.off(PARENT_UNMOUNTED_EVENT, parentUnmountedHandler);\n        logger.log(`Child ${componentName} unmounted from page ${pagePath}`);\n    });\n\n    return {\n        childId: instanceId,\n        childUid, // 返回唯一ID\n        childName: componentName,\n        parent: parentRef,\n        emitToParent: childContext.emitToParent,\n        getParentExposed,\n        parentExposed: computed(() => parentExposed.value),\n        getExposed: childContext.getExposed,\n        pagePath\n    };\n}\n\n/**\n * 监听子组件事件（返回取消监听函数）\n */\nexport function onChildEvent(\n    parentName: string,\n    event: string,\n    handler: (data?: any, childId?: string, childName?: string) => void\n): () => void {\n    const pagePath = getCurrentPagePath();\n\n    const eventHandler = (eventData: { data?: any; childId: string; childName: string; pagePath: string }) => {\n        // 只处理当前页面的事件\n        if (eventData.pagePath === pagePath) {\n            handler(eventData.data, eventData.childId, eventData.childName);\n        }\n    };\n\n    eventBus.on(`parent:${parentName}:${event}`, eventHandler);\n\n    // 返回取消监听函数\n    return () => {\n        eventBus.off(`parent:${parentName}:${event}`, eventHandler);\n    };\n}\n\n/**\n * 监听父组件事件（返回取消监听函数）\n */\nexport function onParentEvent(childId: string, event: string, handler: (data?: any) => void): () => void {\n    eventBus.on(`child:${childId}:${event}`, handler);\n\n    // 返回取消监听函数\n    return () => {\n        eventBus.off(`child:${childId}:${event}`, handler);\n    };\n}\n\n/**\n * 自动取消监听的事件注册 - 单个事件\n */\nexport function useParentEvent(\n    childId: string,\n    event: string,\n    handler: (data?: any) => void,\n    autoClean = true,\n    hotReloadReconnect = true\n): () => void {\n    const instance = getCurrentInstance();\n    const unsubscribe = onParentEvent(childId, event, handler);\n\n    // 热更新重新注册支持\n    if (hotReloadReconnect && instance) {\n        const reconnectKey = `parent-event-${childId}-${event}`;\n        const reconnectCallback = () => {\n            logger.log(`Reconnecting parent event: ${event} for child: ${childId}`);\n            onParentEvent(childId, event, handler);\n        };\n\n        registerHotReloadReconnect(reconnectKey, reconnectCallback);\n\n        // 组件卸载时清理重新注册回调\n        onUnmounted(() => {\n            unregisterHotReloadReconnect(reconnectKey, reconnectCallback);\n        });\n    }\n\n    // 自动在组件卸载时清理\n    if (autoClean && instance) {\n        onUnmounted(unsubscribe);\n    }\n\n    return unsubscribe;\n}\n\n/**\n * 自动取消监听的事件注册 - 批量事件\n */\nexport function useParentEvents(\n    childId: string,\n    events: Record<string, (data?: any) => void>,\n    autoClean = true,\n    hotReloadReconnect = true\n): () => void {\n    const instance = getCurrentInstance();\n    const cleanups: Function[] = [];\n\n    Object.entries(events).forEach(([event, handler]) => {\n        const unsubscribe = onParentEvent(childId, event, handler);\n        cleanups.push(unsubscribe);\n\n        // 热更新重新注册支持\n        if (hotReloadReconnect && instance) {\n            const reconnectKey = `parent-events-${childId}-${event}`;\n            const reconnectCallback = () => {\n                logger.log(`Reconnecting parent event: ${event} for child: ${childId}`);\n                onParentEvent(childId, event, handler);\n            };\n\n            registerHotReloadReconnect(reconnectKey, reconnectCallback);\n\n            // 组件卸载时清理重新注册回调\n            onUnmounted(() => {\n                unregisterHotReloadReconnect(reconnectKey, reconnectCallback);\n            });\n        }\n    });\n\n    const cleanupAll = () => {\n        cleanups.forEach(cleanup => cleanup());\n        cleanups.length = 0;\n    };\n\n    if (autoClean && instance) {\n        onUnmounted(cleanupAll);\n    }\n\n    return cleanupAll;\n}\n\n/**\n * 自动取消监听的子组件事件注册 - 单个事件\n */\nexport function useChildEvent(\n    parentName: string,\n    event: string,\n    handler: (data?: any, childId?: string, childName?: string) => void,\n    autoClean = true,\n    hotReloadReconnect = true\n): () => void {\n    const instance = getCurrentInstance();\n    const unsubscribe = onChildEvent(parentName, event, handler);\n\n    // 热更新重新注册支持\n    if (hotReloadReconnect && instance) {\n        const reconnectKey = `child-event-${parentName}-${event}`;\n        const reconnectCallback = () => {\n            logger.log(`Reconnecting child event: ${event} for parent: ${parentName}`);\n            onChildEvent(parentName, event, handler);\n        };\n\n        registerHotReloadReconnect(reconnectKey, reconnectCallback);\n\n        // 组件卸载时清理重新注册回调\n        onUnmounted(() => {\n            unregisterHotReloadReconnect(reconnectKey, reconnectCallback);\n        });\n    }\n\n    // 自动在组件卸载时清理\n    if (autoClean && instance) {\n        onUnmounted(unsubscribe);\n    }\n\n    return unsubscribe;\n}\n\n/**\n * 自动取消监听的子组件事件注册 - 批量事件\n */\nexport function useChildEvents(\n    parentName: string,\n    events: Record<string, (data?: any, childId?: string, childName?: string) => void>,\n    autoClean = true,\n    hotReloadReconnect = true\n): () => void {\n    const instance = getCurrentInstance();\n    const cleanups: Function[] = [];\n\n    Object.entries(events).forEach(([event, handler]) => {\n        const unsubscribe = onChildEvent(parentName, event, handler);\n        cleanups.push(unsubscribe);\n\n        // 热更新重新注册支持\n        if (hotReloadReconnect && instance) {\n            const reconnectKey = `child-events-${parentName}-${event}`;\n            const reconnectCallback = () => {\n                logger.log(`Reconnecting child event: ${event} for parent: ${parentName}`);\n                onChildEvent(parentName, event, handler);\n            };\n\n            registerHotReloadReconnect(reconnectKey, reconnectCallback);\n\n            // 组件卸载时清理重新注册回调\n            onUnmounted(() => {\n                unregisterHotReloadReconnect(reconnectKey, reconnectCallback);\n            });\n        }\n    });\n\n    const cleanupAll = () => {\n        cleanups.forEach(cleanup => cleanup());\n        cleanups.length = 0;\n    };\n\n    if (autoClean && instance) {\n        onUnmounted(cleanupAll);\n    }\n\n    return cleanupAll;\n}\n\n/**\n * 检查父组件是否存在（在当前页面）\n */\nexport function hasParent(parentName: string): boolean {\n    const pageMaps = getCurrentPageMaps();\n\n    // 精确匹配\n    if (pageMaps.parentMap.has(parentName)) {\n        return true;\n    }\n\n    // 前缀匹配（支持向后兼容）\n    for (const key of pageMaps.parentMap.keys()) {\n        if (key.startsWith(parentName + '-')) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\n/**\n * 获取所有已注册的父组件名称（当前页面）\n */\nexport function getRegisteredParents(): string[] {\n    const pageMaps = getCurrentPageMaps();\n    return Array.from(pageMaps.parentMap.keys());\n}\n\n/**\n * 获取父组件实例（当前页面）\n */\nexport function getParent(parentName: string): ParentContext | undefined {\n    const pageMaps = getCurrentPageMaps();\n\n    // 精确匹配\n    let parent = pageMaps.parentMap.get(parentName);\n    if (parent) {\n        return parent;\n    }\n\n    // 前缀匹配（支持向后兼容）\n    for (const [key, value] of pageMaps.parentMap.entries()) {\n        if (key.startsWith(parentName + '-')) {\n            return value;\n        }\n    }\n\n    return undefined;\n}\n\n/**\n * 获取子组件实例（当前页面）\n */\nexport function getChild(childId: string): ChildContext | undefined {\n    const pageMaps = getCurrentPageMaps();\n    return pageMaps.childMap.get(childId);\n}\n\n/**\n * 清理当前页面的组件关系（用于页面卸载时调用）\n */\nexport function cleanupCurrentPageComponents(): void {\n    const pagePath = getCurrentPagePath();\n    cleanupPageComponentRelations(pagePath);\n    logger.log(`Cleaned up component relations for current page: ${pagePath}`);\n}\n\n/**\n * 手动触发热更新重新连接（用于调试）\n */\nexport function manualHotReloadReconnect(): void {\n    logger.log('Manual hot reload reconnection triggered');\n    executeHotReloadReconnect();\n}\n\n/**\n * 获取热更新状态\n */\nexport function getHotReloadStatus(): { isHotReloading: boolean; reconnectCallbacksCount: number } {\n    let totalCallbacks = 0;\n    hotReloadReconnectCallbacks.forEach(callbacks => {\n        totalCallbacks += callbacks.length;\n    });\n\n    return {\n        isHotReloading,\n        reconnectCallbacksCount: totalCallbacks\n    };\n}\n", "// utils/logger.ts\n\n// 定义原始控制台方法的类型\ninterface ConsoleMethods {\n    log: typeof console.log;\n    info: typeof console.info;\n    warn: typeof console.warn;\n    error: typeof console.error;\n    debug?: typeof console.debug;\n    trace?: typeof console.trace;\n    table?: typeof console.table;\n    time?: typeof console.time;\n    timeEnd?: typeof console.timeEnd;\n    group?: typeof console.group;\n    groupEnd?: typeof console.groupEnd;\n    groupCollapsed?: typeof console.groupCollapsed;\n    assert?: typeof console.assert;\n    clear?: typeof console.clear;\n    count?: typeof console.count;\n    countReset?: typeof console.countReset;\n}\n\n// 安全地获取控制台方法\nconst originalConsole: ConsoleMethods = {\n    log: console.log,\n    info: console.info,\n    warn: console.warn,\n    error: console.error,\n    debug: console.debug,\n    trace: console.trace,\n    table: console.table,\n    time: console.time,\n    timeEnd: console.timeEnd,\n    group: console.group,\n    groupEnd: console.groupEnd,\n    groupCollapsed: console.groupCollapsed,\n    assert: console.assert,\n    clear: console.clear,\n    count: console.count,\n    countReset: console.countReset\n};\n\n// 检查并确保所有方法都存在，不存在的方法用空函数替代\nObject.keys(originalConsole).forEach(key => {\n    const methodKey = key as keyof ConsoleMethods;\n    if (!originalConsole[methodKey]) {\n        (originalConsole[methodKey] as any) = () => {};\n    }\n});\n\nclass Logger {\n    private debugMode: boolean = false;\n    private prefix: string = '[uViewPro]';\n    private showCallerInfo: boolean = true;\n\n    /**\n     * 设置调试模式\n     * @param enabled 是否启用调试模式\n     */\n    setDebugMode(enabled: boolean) {\n        this.debugMode = !!enabled;\n\n        if (this.debugMode) {\n            console.log('[uViewPro] Debug mode enabled');\n        } else {\n            console.log('[uViewPro] Debug mode disabled');\n        }\n        return this;\n    }\n\n    /**\n     * 设置是否显示调用者信息（文件名和行号）\n     * @param show 是否显示调用者信息\n     */\n    setShowCallerInfo(show: boolean) {\n        this.showCallerInfo = !!show;\n        return this;\n    }\n\n    /**\n     * 设置日志前缀\n     * @param prefix 日志前缀\n     */\n    setPrefix(prefix: string) {\n        if (prefix) this.prefix = prefix;\n        return this;\n    }\n\n    /**\n     * 获取当前调试模式状态\n     * @returns 当前调试模式状态\n     */\n    getDebugMode(): boolean {\n        return this.debugMode;\n    }\n\n    /**\n     * 从文件路径中提取纯净的文件名（去除查询参数和路径）\n     * @param filePath 文件路径\n     * @returns 纯净的文件名\n     */\n    private extractFileName(filePath: string): string {\n        if (!filePath) return '';\n\n        // 去除查询参数（?后面的内容）\n        const withoutQuery = filePath.split('?')[0];\n\n        // 使用正斜杠和反斜杠分割路径，取最后一部分\n        const parts = withoutQuery.split(/[/\\\\]/);\n        const fileNameWithExt = parts.pop() || '';\n\n        return fileNameWithExt;\n    }\n\n    /**\n     * 获取调用者信息（文件名和行号）\n     * @returns 调用者信息字符串\n     */\n    private getCallerInfo(): string {\n        if (!this.showCallerInfo) return '';\n\n        try {\n            // 创建一个 Error 对象来获取堆栈跟踪\n            const error = new Error();\n            const stack = error.stack;\n\n            if (!stack) return '';\n\n            // 解析堆栈跟踪，找到调用 logger 的文件和行号\n            const stackLines = stack.split('\\n');\n\n            // 找到第一个不是 logger.ts 的堆栈行\n            for (let i = 3; i < stackLines.length; i++) {\n                const line = stackLines[i].trim();\n                if (line && !line.includes('logger.ts') && !line.includes('Logger.') && !line.includes('at Object.')) {\n                    // 提取文件名和行号\n                    const match = line.match(/\\(?(.*):(\\d+):(\\d+)\\)?/);\n                    if (match) {\n                        const filePath = match[1];\n                        const lineNumber = match[2];\n                        const fileName = this.extractFileName(filePath);\n                        return `[${fileName}:${lineNumber}]`;\n                    }\n                    break;\n                }\n            }\n        } catch (e) {\n            // 如果获取调用者信息失败，静默处理\n        }\n\n        return '';\n    }\n\n    /**\n     * 通用日志输出方法\n     * @param level 日志级别\n     * @param args 日志参数\n     */\n    private output(level: keyof ConsoleMethods, ...args: any[]): void {\n        if (!this.debugMode || !originalConsole[level]) return;\n\n        const method = originalConsole[level] as Function;\n        const callerInfo = this.getCallerInfo();\n\n        if (this.prefix) {\n            if (callerInfo) {\n                method(`${this.prefix}${callerInfo}`, ...args);\n            } else {\n                method(this.prefix, ...args);\n            }\n        } else {\n            if (callerInfo) {\n                method(callerInfo, ...args);\n            } else {\n                method(...args);\n            }\n        }\n    }\n\n    /**\n     * 普通日志\n     * @param args 日志参数\n     */\n    log(...args: any[]): void {\n        this.output('log', ...args);\n    }\n\n    /**\n     * 信息日志\n     * @param args 日志参数\n     */\n    info(...args: any[]): void {\n        this.output('info', ...args);\n    }\n\n    /**\n     * 警告日志\n     * @param args 日志参数\n     */\n    warn(...args: any[]): void {\n        this.output('warn', ...args);\n    }\n\n    /**\n     * 错误日志\n     * @param args 日志参数\n     */\n    error(...args: any[]): void {\n        this.output('error', ...args);\n    }\n\n    /**\n     * 调试日志\n     * @param args 日志参数\n     */\n    debug(...args: any[]): void {\n        if (!originalConsole.debug) return;\n        this.output('debug', ...args);\n    }\n\n    /**\n     * 堆栈跟踪\n     * @param args 日志参数\n     */\n    trace(...args: any[]): void {\n        if (!originalConsole.trace) return;\n        this.output('trace', ...args);\n    }\n\n    /**\n     * 表格输出\n     * @param data 表格数据\n     * @param columns 列名（可选）\n     */\n    table(data: any, columns?: string[]): void {\n        if (!this.debugMode || !originalConsole.table) return;\n\n        if (this.prefix) {\n            originalConsole.log!(this.prefix);\n        }\n        originalConsole.table!(data, columns);\n    }\n\n    /**\n     * 开始计时\n     * @param label 计时器标签\n     */\n    time(label: string): void {\n        if (!this.debugMode || !originalConsole.time) return;\n\n        const fullLabel = this.prefix ? `${this.prefix} ${label}` : label;\n        originalConsole.time!(fullLabel);\n    }\n\n    /**\n     * 结束计时\n     * @param label 计时器标签\n     */\n    timeEnd(label: string): void {\n        if (!this.debugMode || !originalConsole.timeEnd) return;\n\n        const fullLabel = this.prefix ? `${this.prefix} ${label}` : label;\n        originalConsole.timeEnd!(fullLabel);\n    }\n\n    /**\n     * 分组日志\n     * @param label 分组标签\n     */\n    group(label: string): void {\n        if (!this.debugMode || !originalConsole.group) return;\n\n        const fullLabel = this.prefix ? `${this.prefix} ${label}` : label;\n        originalConsole.group!(fullLabel);\n    }\n\n    /**\n     * 结束分组\n     */\n    groupEnd(): void {\n        if (!this.debugMode || !originalConsole.groupEnd) return;\n        originalConsole.groupEnd!();\n    }\n\n    /**\n     * 分组日志（默认折叠）\n     * @param label 分组标签\n     */\n    groupCollapsed(label: string): void {\n        if (!this.debugMode || !originalConsole.groupCollapsed) return;\n\n        const fullLabel = this.prefix ? `${this.prefix} ${label}` : label;\n        originalConsole.groupCollapsed!(fullLabel);\n    }\n\n    /**\n     * 断言\n     * @param condition 条件\n     * @param message 错误消息\n     */\n    assert(condition: boolean, ...message: any[]): void {\n        if (!this.debugMode || !originalConsole.assert) return;\n\n        if (this.prefix) {\n            originalConsole.assert!(condition, this.prefix, ...message);\n        } else {\n            originalConsole.assert!(condition, ...message);\n        }\n    }\n\n    /**\n     * 清空控制台\n     */\n    clear(): void {\n        if (!this.debugMode || !originalConsole.clear) return;\n        originalConsole.clear!();\n    }\n\n    /**\n     * 计数器\n     * @param label 计数器标签\n     */\n    count(label?: string): void {\n        if (!this.debugMode || !originalConsole.count) return;\n\n        const fullLabel = this.prefix && label ? `${this.prefix} ${label}` : label || this.prefix;\n        originalConsole.count!(fullLabel);\n    }\n\n    /**\n     * 重置计数器\n     * @param label 计数器标签\n     */\n    countReset(label?: string): void {\n        if (!this.debugMode || !originalConsole.countReset) return;\n\n        const fullLabel = this.prefix && label ? `${this.prefix} ${label}` : label || this.prefix;\n        originalConsole.countReset!(fullLabel);\n    }\n\n    /**\n     * 带样式的日志\n     * @param style CSS样式\n     * @param message 消息内容\n     */\n    styled(style: string, message: string): void {\n        if (!this.debugMode) return;\n\n        const callerInfo = this.getCallerInfo();\n        const fullMessage = callerInfo ? `${message} ${callerInfo}` : message;\n\n        if (this.prefix) {\n            console.log(`%c${this.prefix} ${fullMessage}`, style);\n        } else {\n            console.log(`%c${fullMessage}`, style);\n        }\n    }\n}\n\n// 创建全局单例\nconst logger = new Logger();\n\n// 导出单例和类\nexport { logger, Logger };\n", "import { type ComponentInternalInstance, getCurrentInstance } from 'vue';\n\n/**\n * 将事件名转换为驼峰格式\n * @param str 需要转换的字符串\n * @description 例如：on-form-change -> onFormChange\n * @returns\n */\nfunction formatToCamelCase(str: string): string {\n    return str.replace(/-([a-z])/g, function (g) {\n        return g[1].toUpperCase();\n    });\n}\n\nexport function useEmitter(name: string) {\n    const instance: ComponentInternalInstance | null | undefined = getCurrentInstance();\n\n    /** * 向上查找父组件并派发事件\n     * @param instance 当前组件实例（setup中可用getCurrentInstance()）\n     * @param componentName 目标组件名\n     * @param eventName 事件名\n     * @param params 参数\n     */\n    function dispatch(componentName: string, eventName: string, ...params: any[]) {\n        let parent = instance && (instance.parent as ComponentInternalInstance | null | undefined);\n        while (parent) {\n            const name = (parent.type as any)?.name as string | undefined;\n            if (name === componentName) {\n                // 找到目标组件，派发事件\n                // Vue3未解决，目标组件事件监听失效，待优化，暂时使用下面的方式解决，如果你有好的方式也可以告诉我或者提PR\n                parent.emit && parent.emit(eventName, ...params);\n                // 如果有对应的方法，执行方法\n                // 这里可以考虑将 eventName 转换为驼峰格式\n                // 例如：on-form-change -> onFormChange\n                parent.exposed?.[formatToCamelCase(eventName)] &&\n                    parent.exposed[formatToCamelCase(eventName)](...params);\n                break;\n            }\n            parent = parent.parent;\n        }\n    }\n\n    /**\n     * 向下递归查找子组件并广播事件\n     * @param instance 当前组件实例（setup中可用getCurrentInstance()）\n     * @param componentName 目标组件名\n     * @param eventName 事件名\n     * @param params 参数\n     */\n    function broadcast(componentName: string, eventName: string, ...params: any[]) {\n        if (!instance) return;\n        const subTree = (instance.subTree as any)?.children || [];\n        const children = Array.isArray(subTree) ? subTree : [subTree];\n        children.forEach((vnode: any) => {\n            const child = vnode.component as ComponentInternalInstance | undefined;\n\n            if (child) {\n                const name = (child.type as any)?.name as string | undefined;\n                if (name === componentName) {\n                    // 找到目标组件，广播事件\n                    // Vue3未解决，目标组件事件监听失效，待优化，暂时使用下面的方式解决，如果你有好的方式也可以告诉我或者提PR\n                    child.emit && child.emit(eventName, ...params);\n                    // 如果有对应的方法，执行方法\n                    // 这里可以考虑将 eventName 转换为驼峰格式\n                    // 例如：on-form-change -> onFormChange\n                    child.exposed?.[formatToCamelCase(eventName)] &&\n                        child.exposed[formatToCamelCase(eventName)](...params);\n                } else {\n                    broadcast.call(child, componentName, eventName, ...params);\n                }\n            }\n        });\n    }\n\n    return {\n        dispatch,\n        broadcast\n    };\n}\n", "import { getCurrentInstance, nextTick, ref } from 'vue';\n\n/**\n * useRect - 获取元素的位置信息（响应式，原生实现）\n * @param selector 选择器（如 #id 或 .class）\n * @param all 是否获取所有匹配元素\n * @returns rect 响应式的节点信息，refresh 主动刷新方法\n */\nexport function useRect(selector: string, all = false) {\n    const rect = ref<any>(all ? [] : null);\n    const instance = getCurrentInstance();\n\n    async function refreshRect(delay = 0) {\n        await nextTick();\n        return new Promise(resolve => {\n            setTimeout(() => {\n                uni.createSelectorQuery()\n                    .in(instance?.proxy)\n                    [all ? 'selectAll' : 'select'](selector)\n                    .boundingClientRect((res: any) => {\n                        rect.value = res;\n                        resolve(res);\n                    })\n                    .exec();\n            }, delay);\n        });\n    }\n\n    return {\n        rect,\n        refreshRect\n    };\n}\n", "// post类型对象参数转为get类型url参数\nimport queryParams from './function/queryParams';\n// 路由封装\nimport route from './function/route';\n// 时间格式化\nimport timeFormat from './function/timeFormat';\n// 时间戳格式化,返回多久之前\nimport timeFrom from './function/timeFrom';\n// 颜色渐变相关,colorGradient-颜色渐变,hexToRgb-十六进制颜色转rgb颜色,rgbToHex-rgb转十六进制\nimport colorGradients from './function/colorGradient';\n// 生成全局唯一guid字符串\nimport guid from './function/guid';\n// 主题相关颜色,info|success|warning|primary|default|error,此颜色已在uview.scss中定义,但是为js中也能使用,故也定义一份\nimport color from './function/color';\n// 根据type获取图标名称\nimport type2icon from './function/type2icon';\n// 打乱数组的顺序\nimport randomArray from './function/randomArray';\n// 对象和数组的深度克隆\nimport deepClone from './function/deepClone';\n// 对象深度拷贝\nimport deepMerge from './function/deepMerge';\n// 添加单位\nimport addUnit from './function/addUnit';\n// 规则检验\nimport test from './function/test';\n// 随机数\nimport random from './function/random';\n// 去除空格\nimport trim from './function/trim';\n// toast提示，对uni.showToast的封装\nimport toast from './function/toast';\n// 获取父组件参数\nimport getParent from './function/getParent';\n// 获取整个父组件\nimport $parent from './function/$parent';\n// 获取sys()和os()工具方法\n// 获取设备信息，挂载到$u的sys()(system的缩写)属性中，\n// 同时把安卓和ios平台的名称\"ios\"和\"android\"挂到$u.os()中，方便取用\nimport { sys, os } from './function/sys';\n// 防抖方法\nimport debounce from './function/debounce';\n// 节流方法\nimport throttle from './function/throttle';\n// 获取元素的位置信息\nimport getRect from './function/getRect';\n// 获取父组件\nimport { parentData, parent } from './function/parent';\n// 配置信息\nimport config from './config/config';\n// 各个需要fixed的地方的z-index配置文件\nimport zIndex from './config/zIndex';\nimport { dispatch, broadcast } from './util/emitter';\nimport { mitt } from './util/mitt';\n// http相关\nimport httpPlugin, {\n    Request,\n    http,\n    type RequestOptions,\n    type RequestConfig,\n    type RequestInterceptor,\n    type RequestMeta\n} from './request/index';\n\n/**\n * @description 数字格式化\n * @param number 要格式化的数字\n * @param decimals 保留几位小数\n * @param decimalPoint 小数点符号\n * @param thousandsSeparator 千分位符号\n * @returns 格式化后的数字\n */\nexport function formatPrice(\n    number: number | string,\n    decimals: number = 0,\n    decimalPoint: string = '.',\n    thousandsSeparator: string = ','\n): string {\n    // 辅助函数：四舍五入到指定小数位\n    function round(num: number, precision: number): string {\n        const factor = Math.pow(10, precision);\n        return (Math.round(num * factor) / factor).toFixed(precision);\n    }\n\n    let numStr = String(number).replace(/[^0-9+\\-Ee.]/g, '');\n    const n = !isFinite(+numStr) ? 0 : +numStr;\n    const prec = !isFinite(+decimals) ? 0 : Math.abs(decimals);\n    const sep = thousandsSeparator ?? ',';\n    const dec = decimalPoint ?? '.';\n    let s: string[] = [];\n\n    s = (prec ? round(n, prec) : Math.round(n).toString()).split('.');\n    const re = /(-?\\d+)(\\d{3})/;\n    while (re.test(s[0])) {\n        s[0] = s[0].replace(re, `$1${sep}$2`);\n    }\n\n    if ((s[1] || '').length < prec) {\n        s[1] = s[1] || '';\n        s[1] += '0'.repeat(prec - s[1].length);\n    }\n    return s.join(dec);\n}\n\n// 默认的姓名脱敏规则\nexport function formatName(name: string): string {\n    if (name.length === 2) {\n        return name.charAt(0) + '*';\n    } else if (name.length > 2) {\n        const masked = '*'.repeat(name.length - 2);\n        return name.charAt(0) + masked + name.charAt(name.length - 1);\n    } else {\n        return name;\n    }\n}\n\n/**\n * @description 样式转换\n * 对象转字符串，或者字符串转对象\n * @param {object | string} customStyle 需要转换的目标\n * @param {String} target 转换的目的，object-转为对象，string-转为字符串\n * @returns {object|string}\n */\nexport function addStyle(\n    customStyle: Record<string, string> | string,\n    target: 'object' | 'string' = 'object'\n): Record<string, string> | string {\n    // 字符串转字符串，对象转对象情形，直接返回\n    if (\n        test.empty(customStyle) ||\n        (typeof customStyle === 'object' && target === 'object') ||\n        (target === 'string' && typeof customStyle === 'string')\n    ) {\n        return customStyle;\n    }\n    // 字符串转对象\n    if (target === 'object') {\n        // 去除字符串样式中的两端空格\n        const trimmedStyle = trim(customStyle as string);\n        const styleArray = trimmedStyle.split(';');\n        const style: Record<string, string> = {};\n        for (let i = 0; i < styleArray.length; i++) {\n            if (styleArray[i]) {\n                const item = styleArray[i].split(':');\n                if (item.length === 2) {\n                    style[trim(item[0])] = trim(item[1]);\n                }\n            }\n        }\n        return style;\n    }\n    // 对象转字符串\n    let string = '';\n    for (const i in customStyle as Record<string, string>) {\n        if (Object.prototype.hasOwnProperty.call(customStyle, i)) {\n            const key = i.replace(/([A-Z])/g, '-$1').toLowerCase();\n            string += `${key}:${(customStyle as Record<string, string>)[i]};`;\n        }\n    }\n    return trim(string);\n}\n\n/**\n * 将外部传入的样式格式化为可读的 CSS 样式。\n * @param {object | object[]} styles 外部传入的样式对象或数组\n * @returns {string} 格式化后的 CSS 样式字符串\n */\nexport function toStyle(styles: Record<string, any> | Record<string, any>[] | string): string {\n    // 如果 styles 是字符串类型\n    if (test.string(styles)) {\n        // 如果是字符串且不为空，确保末尾有分号\n        return styles ? (styles.endsWith(';') ? styles : styles + ';') : '';\n    }\n    // 如果 styles 是数组类型\n    if (test.array(styles)) {\n        // 使用过滤函数去除空值和 null 值的元素\n        // 对每个非空元素递归调用 objToStyle，然后通过分号连接\n        const result = styles\n            .filter(function (item) {\n                return item != null && item !== '';\n            })\n            .map(function (item) {\n                return toStyle(item);\n            })\n            .join(';');\n\n        // 如果结果不为空，确保末尾有分号\n        return result ? (result.endsWith(';') ? result : result + ';') : '';\n    }\n    // 如果 styles 是对象类型\n    if (test.object(styles)) {\n        // 使用 Object.keys 获取所有属性名\n        // 使用过滤函数去除值为 null 或空字符串的属性\n        // 对每个属性名和属性值进行格式化，通过分号连接\n        const result = Object.keys(styles)\n            .filter(function (key) {\n                return styles[key] != null && styles[key] !== '';\n            })\n            .map(function (key) {\n                // 使用 kebabCase 函数将属性名转换为 kebab-case 格式\n                // 将属性名和属性值格式化为 CSS 样式的键值对\n                return [kebabCase(key), styles[key]].join(':');\n            })\n            .join(';');\n\n        // 如果结果不为空，确保末尾有分号\n        return result ? (result.endsWith(';') ? result : result + ';') : '';\n    }\n    // 如果 styles 不是对象也不是数组，则直接返回\n    return '';\n}\n\n/**\n * 将驼峰命名转换为短横线命名。\n * @param {string} word 待转换的词条\n * @returns {string} 转换后的结果\n */\nexport function kebabCase(word: string): string {\n    // 使用正则表达式匹配所有大写字母，并在前面加上短横线，然后转换为小写\n    const newWord: string = word\n        .replace(/[A-Z]/g, function (match) {\n            return '-' + match;\n        })\n        .toLowerCase();\n\n    return newWord;\n}\n\nexport {\n    queryParams,\n    route,\n    timeFormat,\n    timeFrom,\n    guid,\n    color,\n    sys,\n    os,\n    type2icon,\n    randomArray,\n    deepClone,\n    deepMerge,\n    addUnit,\n    test,\n    random,\n    trim,\n    toast,\n    debounce,\n    throttle,\n    getRect,\n    getParent,\n    $parent,\n    parent,\n    parentData,\n    dispatch,\n    broadcast,\n    config,\n    zIndex,\n    mitt\n};\n\nexport const $u = {\n    queryParams: queryParams,\n    route: route,\n    timeFormat: timeFormat,\n    date: timeFormat, // 另名date\n    timeFrom,\n    colorGradient: colorGradients.colorGradient,\n    colorToRgba: colorGradients.colorToRgba,\n    guid,\n    color,\n    sys,\n    os,\n    type2icon,\n    randomArray,\n    dispatch,\n    broadcast,\n    hexToRgb: colorGradients.hexToRgb,\n    rgbToHex: colorGradients.rgbToHex,\n    test,\n    random,\n    deepClone,\n    deepMerge,\n    getParent,\n    $parent,\n    parent,\n    parentData,\n    addUnit,\n    trim,\n    type: ['primary', 'success', 'error', 'warning', 'info'],\n    http,\n    toast,\n    config, // uView配置信息相关，比如版本号\n    zIndex,\n    debounce,\n    throttle,\n    mitt: mitt(),\n    getRect,\n    formatPrice,\n    formatName,\n    addStyle,\n    toStyle,\n    kebabCase\n};\n\n// 颜色相关方法单独导出\nexport const { colorGradient, colorToRgba, hexToRgb, rgbToHex } = colorGradients;\n// http相关导出\nexport {\n    Request,\n    httpPlugin,\n    http,\n    type RequestOptions,\n    type RequestConfig,\n    type RequestInterceptor,\n    type RequestMeta\n};\n\nexport * from './hooks';\n\nexport * from './util/logger';\n", "import { $u, type RequestOptions } from './libs';\nimport type { UViewProOptions } from './types/global';\nimport { logger } from './libs/util/logger';\n\ndeclare const uni: {\n    [key: string]: any;\n    $u?: typeof $u;\n    createSelectorQuery: () => any;\n    hideLoading: () => void;\n    showLoading: (options: any) => void;\n    request: (options: RequestOptions) => any;\n};\n\n// $u挂载到uni对象上\nconst install = (app: any, options?: UViewProOptions): void => {\n    uni.$u = $u;\n    if (options) {\n        // 配置主题\n        if (options.theme) {\n            $u.color = $u.deepMerge($u.color, options.theme);\n        }\n        // 设置调试模式\n        logger\n            .setDebugMode(options?.log?.debug ?? true)\n            .setPrefix(options?.log?.prefix)\n            .setShowCallerInfo(options?.log?.showCallerInfo ?? true);\n    }\n    // 可扩展更多配置项\n    app.config.globalProperties.$u = $u;\n};\n\nexport default {\n    install\n};\n\nexport * from './libs';\n\nexport type { UViewProOptions };\n"],
  "mappings": "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",
  "names": ["url", "config", "date", "timer", "color", "array", "parent", "parent", "func", "func", "getCurrentInstance", "getCurrentInstance", "parent", "getCurrentInstance", "parent", "_a", "url", "getCurrentInstance", "getCurrentInstance", "parent", "getCurrentInstance", "formatToCamelCase", "dispatch", "parent", "name", "broadcast", "_a", "getCurrentInstance", "nextTick", "ref", "number", "string", "colorGradient", "colorToRgba", "hexToRgb", "rgbToHex"]
}
